<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[水刃]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://topdna.org/"/>
  <updated>2014-10-13T22:01:30.862Z</updated>
  <id>http://topdna.org/</id>
  
  <author>
    <name><![CDATA[hustcer]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[琐忆]]></title>
    <link href="http://topdna.org/essay/auld-lang-syne/"/>
    <id>http://topdna.org/essay/auld-lang-syne/</id>
    <published>2014-09-23T05:04:41.000Z</published>
    <updated>2014-10-13T05:08:38.000Z</updated>
    <content type="html"><![CDATA[<center><br>年年如是，<br>年年不同，<br>依稀往事，<br>如梦如风。<br></center>

<p><span class="alignright ps">2014/09/23@HZ</span></p>
]]></content>
    <summary type="html">
    <![CDATA[人寂林深月芽初，叶落鸟悲老树秃，信步归舍只影瘦，斜卧闲翻半箧书。]]>
    
    </summary>
    
      <category term="随感" scheme="http://topdna.org/tags/essay/"/>
    
      <category term="随感" scheme="http://topdna.org/categories/essay/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[空白]]></title>
    <link href="http://topdna.org/essay/blankness/"/>
    <id>http://topdna.org/essay/blankness/</id>
    <published>2014-01-12T23:19:11.000Z</published>
    <updated>2014-02-08T08:20:03.000Z</updated>
    <content type="html"><![CDATA[<center><br>空度万载光阴，<br>白费灼灼青春，<br>一心寻思珍惜，<br>生去了无印痕。<br></center>

<p><span class="alignright ps">2014/01/13@HZ.BJ</span></p>
]]></content>
    <summary type="html">
    <![CDATA[空度万载光阴，白费灼灼青春，一心寻思珍惜，生去了无印痕。]]>
    
    </summary>
    
      <category term="随感" scheme="http://topdna.org/tags/essay/"/>
    
      <category term="随感" scheme="http://topdna.org/categories/essay/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于美国资本利得税]]></title>
    <link href="http://topdna.org/investment/capital-gains-tax/"/>
    <id>http://topdna.org/investment/capital-gains-tax/</id>
    <published>2013-12-20T13:11:31.000Z</published>
    <updated>2013-12-21T09:10:27.000Z</updated>
    <content type="html"><![CDATA[<p>本文系转载备忘，<a href="http://www.firstrade.com/content/zh-cn/education/taxguide" target="_blank" rel="external">出处见此</a>。另外中国公民投资美股可以不用缴税，不过要填写免税申请表格。然而了解下美国的资本利得税制度有助于理解年底美国本土居民因为税收等原因卖出股票的行为。</p>
<a id="more"></a>

<hr>
<h2 id="概论">概论</h2>
<p>四月十五是美国非常重要的日子，因为那一天是美国报税的截止日。我们工作、投资等各种收入都必须付税，因此若能够彻底了解税与投资的关系，您可以建立对您最有税利的投资策略，增加税后收入。</p>
<h2 id="专有名词">专有名词</h2>
<p>在我们开始之前，请先看看一些税务专有名词：</p>
<table>
<thead>
<tr>
<th style="text-align:left">术语</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>Schedule D</strong></td>
<td style="text-align:left">用来呈报投资资产损益的表格。若您今年有卖出股票，国税局规定您必须交此表。</td>
</tr>
<tr>
<td style="text-align:left"><strong>Dividends 股息</strong></td>
<td style="text-align:left">公司利益发放给股东的金额。联邦课税级别不同的投资人股息税率不同，通常为5%至15%。</td>
</tr>
<tr>
<td style="text-align:left"><strong>Interest Income 利息收入</strong></td>
<td style="text-align:left">来自於利息的投资收入。发放利息的投资项目包含国债、公司债、储蓄债券、定期存单、活动存款等等。</td>
</tr>
<tr>
<td style="text-align:left"><strong>1099</strong></td>
<td style="text-align:left">若您该年投资活动有卖出证券，或累积利息超过$10.00，您就会收到此表格。您必须有社会安全卡号码，用此表格与国税局报税。此表格一月底之前会发放给投资人。表格内资料包含股息、不合格股息、利息、资本收益、海外预扣税、卖出资讯。</td>
</tr>
<tr>
<td style="text-align:left"><strong>1099-R</strong></td>
<td style="text-align:left">若您该年有存IRA退休帐户提款，就会收到此表格。提款行为包含存款超过上限、提早提款、规定最低提款(RMD)，以及转换成罗斯IRA。此表格一月底之前会发放给投资人。</td>
</tr>
<tr>
<td style="text-align:left"><strong>1042-S</strong></td>
<td style="text-align:left">此表格发放给所有国际帐户持有人，於四月寄出。</td>
</tr>
<tr>
<td style="text-align:left"><strong>Trade Confirmations交易认证</strong></td>
<td style="text-align:left">当订单成交我们会自动寄出(或用电子档案)认证，内容包含交易的所有细节。为了您报税便利，请务必好好保管这些交易纪录，计算应负税。</td>
</tr>
<tr>
<td style="text-align:left"><strong>Trade Settlement交易交割</strong></td>
<td style="text-align:left">股票交易成交后卖方必须交予股票，及买方必须付款的日期。一般证券交割为T+3，交易日的第三个工作天。期权及某些共同基金交割只需一个工作天。</td>
</tr>
<tr>
<td style="text-align:left"><strong>Gain/Loss已实现/未实现益损</strong></td>
<td style="text-align:left">若股票平仓后会造成益损，称为未实现益损。已经平仓且发生的投资益损则称为已实现益损。报税时只需计算已实现益损。</td>
</tr>
<tr>
<td style="text-align:left"><strong>Ordinary (Qualified) Dividends一般股息</strong></td>
<td style="text-align:left">2003年Jobs and Growth Tax Relief Reconciliation法案(2003年五月生效)订定一般股息可以较低税率计算所得税。此股息必须来自於美国公司、或合格外国公司。股息要被算为合格股息，必须达到持有时间规定。(通常股息税率为15%或更低)</td>
</tr>
<tr>
<td style="text-align:left"><strong>Non-Qualified Dividends不合格股息</strong></td>
<td style="text-align:left">不能以较低税率计算所得税的股息。这些股息以一般所得税率计算。(所有未持有61天的共同基金股息都算为不合格股息)。</td>
</tr>
<tr>
<td style="text-align:left">———————————-</td>
</tr>
</tbody>
</table>
<h2 id="计算资本损益">计算资本损益</h2>
<p>美国国税局规定投资人需要为已实现利益缴税，而已实现利益又可以被已实现亏损抵消。若一个投资人於一个税年内已实现亏损超出利益，亏损额甚至可以抵消该年的所得收入，以$3,000为上限。您规划投资理财策略时，务必将税的影响纳入其中。</p>
<p>一个很重要的观念就是未实现益损若今年不去实现(平仓)，则不会影响今年税务而直截跨入隔年。因此若您认为短期内您的股票不会有大幅变动，可以考虑是否要买进/卖出该证券，实现益损以降低所得税负担。</p>
<p>股票的成本计算方式为买价加上佣金或其他的调整项目。若卖出后扣掉成本有赚钱，该金额算为资本利益。若平仓后是赔钱，则为资本亏损。请看以下例子解释资本损益计算：</p>
<p>假设李先生买进了10股的XYZ，每股$20.00，同时支付佣金$10.00。这笔交易的成本为10 x $20.00/股 = $200.00 + $10.00 (佣金) = $210.00。</p>
<p>接下来有两种可能：</p>
<ul>
<li><p>李先生决定以每股$25.00的价钱卖出XYZ股票(佣金 = $10.00)。李先生计算这笔交易为：10 x $25.00/股 = $250.00 - $10.00 (佣金) = $240.00。<br>李先生的帐户有资本收益，因为： $240.00 (卖出) - $210.00 (成本) = +$30.00。</p>
</li>
<li><p>李先生决定以每股$10.00的价钱卖出XYZ股票(佣金 = $10.00)。李先生计算这笔交易为：10 x $10.00/股 = $100.00 - $10.00 (佣金) = $90.00。<br>李先生的帐户出现资本亏损，因为： $90.00 (卖出) - $210.00 (成本) = -$120.00。</p>
</li>
</ul>
<h2 id="持有时间">持有时间</h2>
<p>股票持有时间不同，资本增涨的税率也会不一样。只要股票持有时间超出一年，赚的钱算为长期资本收益，只需缴15%的所得税。若未满一年则必须缴一般所得税率。</p>
<p>2011年，美国联邦税务局将短期资本所得税税率“一刀切”为20%，并设定为统一比例税率。也就是说，在2011年以后的美国，凡是投资者“短炒”所得将要统一按20%征缴资本所得税。这一计划是在2003年作出的。</p>
<p>当投资者买入与卖出某股票的时间间隔超过1年时，该股票的买卖所得，被称为“长期资本所得”。</p>
<ul>
<li>当长期资本所得为正时，则按优惠税率纳税；相反，当长期资本所得为零或负数时，则不用缴纳资本所得税。</li>
<li><p>长期资本所得税税率，仍然根据炒股所得额的多少，按普通所得税率分别优惠为两档征缴：</p>
<ol>
<li>当长期资本所得分别介于普通所得税税率前两档（10%、15%）时，则统一给予优惠税率5%征缴资本所得税。</li>
<li>当长期资本所得分别介于普通所得税税率后四档（25%、28%、33%、35%）时，则统一给予优惠税率15%征缴资本所得税。</li>
</ol>
</li>
</ul>
<p>若您细心注意持有时间，可以减轻不少税的负担。举例来说，若您考虑卖出一支已经持有十一个月的股票，不彷再等一个月，所赚的钱即可以长期资本收益计算。只要最后这一个月内该股票价钱没有大幅下跌，您则会因为税率较低而赚取较多税后收入。同样的，您应尽量避免长期资本亏损，因为您不希望抵消有税利的长期资本收益。</p>
<p>假设您的一般所得税率是30%，您有$3,000未实现短期资本收益，以及$3,000的未实现长期资本收益。您有一支股票卖出后赔了$2,000。</p>
<ul>
<li><p>若您赔钱卖出持有短期的股票，您的短期资本收益其中$2,000会抵消。剩余的$1,000则以30%税率计算所得税，因此您需要缴$300 (短期) + $450 (长期) = $750应缴所得税。</p>
</li>
<li><p>若您赔钱卖出持有长期的股票，您的长期资本收益其中$2,000会抵消。剩余的$1,000则以15%税率计算所得税，因此您需要缴$150 (长期) + $900 (短期) = $1050应缴所得税。</p>
</li>
</ul>
<p>短期收益税率较高，因此短期亏损可以降低您要缴的税金。长期收益税率较低，所以虽然长期亏损可以抵税，效果没有那么显著。<br>若您收到股票股息，规则相同。唯一要注意的就是若股息为应缴税，持有日由发放股息当天开始计算。若股息为免税股息，持有日则由买进原股票当日起算。</p>
<p>注意：虽然十二月三十一日交易隔年才会完成交割手续，报税时这笔交易仍然视为今年所完成的交易。</p>
<p>卖空交易的规定不同。交割日必须在年底，完成全部交隔手续，方可算为该年的交易。所有损益以交割日(非交易日)计算。</p>
<h2 id="Tax_Lots">Tax Lots</h2>
<p>每一笔交易所买进的股票统计为一个”lot”。若您以不同的价钱分三次每次100股买进IBM股票，虽然您的帐户显示300股IBM，每100股却方别算为一个”lot”。当您卖出证券时，卖出不同的lot可以使您已实现益损有之不同，降低税金。(若您卖出时不指定怎么计算lot，国税局自动使用FIFO (First In, First Out 先进先出)，也就是说您先买的股票会先卖出。)</p>
<p>请看下面例子： 您於一月买进100股FZ Steel Co.，每股$5。三个月后您又买进了100股，每股$7。股票目前价格为$10/股。</p>
<p>买进交易 1: $5 x 100 = $500; 买进交易 2: $7 x 100 = $700 总价 = $1,200<br>$10 x 200 = 2,000   今天股票值 = $2,000<br>    总未实现利益 $800<br>若您决定以买股$10的价钱卖出150股FZ Steel Co.，要怎么计算您的买价呢？您所卖出的150股可能是之前200个的各种组合。让我们计算一下您买进这150股花了多少钱：</p>
<ul>
<li><p>若您将100股选自於$5lot，另外50股选於$7 lot (FIFO)：<br>(100股 X $5) + (50 股 X $7) = $500 + $350 = $850 成本<br>(150 股 X $10) - $850 = $1,500 - $850 = $650 总收益<br>用FIFO方式计算，您实现了$650的收益 (不包含佣金及其他费用)。</p>
</li>
<li><p>让我门来试试另一种算法，这次从两个lot中各取75股：<br>(75 股 X $5) + (75 股 X $7) = $375 + $525 = $900<br>(150 股 X $10) - $900 = $1,500 - $900 = $600<br>用这总算法，您实现了$600的收益 (不包含佣金及其他费用)。第二种算法可以让您少$50的所得税责任。</p>
</li>
</ul>
<p>注意： 以上计算方式并不会影响您未实现收益的金额，只会影响您需要缴的税金。<br>每笔交易都有不同的特性，但怎么搭配买卖交易可以改变您需要付的税金。您只要资料整理完善，用点基本的数学，即可用此建立投资省税的策略。</p>
<h2 id="别作弊：冲洗交易Wash_Sale">别作弊：冲洗交易Wash Sale</h2>
<p>为了预防投资人卖出股票认赔抵税后再度买进同一支股票，特别设立冲洗交易规则。冲洗交易期为卖出日的前后各30天，共61天(包含卖出日)。</p>
<p>若您不慎进行了冲洗交易：</p>
<ul>
<li>亏损金额不可抵税</li>
<li>新买进的股票成本需做调整(加第一笔交易赔损的款项)</li>
<li>新买进的股票持有时间计算必须包含之前第一笔交易的股票</li>
</ul>
<p>假设您有500股$40买进的Fiko Steel, Co.，您现在希望以每股$25卖出抵税。卖出后第15您听说Fiko Steel, Co.的前景不错，於是用$30的价位又买进了500股。虽然您第一笔交易每股赔了$15，这个金额不抵税，因为您在冲洗交易期间再度了买进同一支股票。此外，因为您进行了冲洗交易，新买进的股票成本计算必须加$15，等於每股$45。</p>
<p>冲洗交易规则包含所有”非常类似”的证券。以下几种证券不包含在冲洗交易规则中：</p>
<ol>
<li>同一个机构发行，但有不同到期日、利息的债券</li>
<li>同一家公司的普通股及优先股</li>
<li>同一个产业，但另一家公司的股票</li>
</ol>
<h2 id="卖空">卖空</h2>
<p>卖空证券报税的基本观念就是平仓前不需缴税。卖空若赔钱，在您将股票送至经纪平仓之前也不能够进行抵税。卖空交易以平仓日那年为税年，且不管持有短仓时间多久，都算为短期持有益损。若您对卖空的详细规则有疑问，请与您的税务顾问联络。</p>
<h2 id="特殊税务状况">特殊税务状况</h2>
<ul>
<li><p><strong>现金替代</strong>：公司并购或股票分割时，持有小数股数的帐户不会直接收到对照该股数的股票，而是收到现金配给。报税时您必须将此小数股计算入成本中，卖出时也用它计算收益或亏损。</p>
</li>
<li><p><strong>股票股息</strong>：有些公司会发行更多股票给目前的股东。新的股票报税时必须加入计算成本，且这些新股的持有日期以原股买进日期相同。收到股息的时候不需要报税，但是卖出股票时的收入则须报税。</p>
</li>
<li><p><strong>现金股息</strong>：您必须於Schedule D纪录现金股息。现金股息分合格及不合格股息两种，会因股票发行公司或持有股票时间而不同。</p>
</li>
<li><p><strong>并购现金发放</strong>： (ABC公司宣布将与XYZ公司合并，每股ABC可得0.5股新股加$1.00现款)请务必先取得并购的细节，包含股票兑换比率以及现金发放金额。若您没有被通知此消息，您可以去发行公司网站的投资人服务部门取得资料。您可以用此资料计算新的成本及损益。某些并购的内容非常复杂，建议您与专业税务顾问联络。</p>
</li>
<li><p><strong>股票分割</strong>：股票分割时，您持有证券的价值并不会改变，您只需依照分割比例调整成本即可。举例来说，您以每股$5.00的价格买进了10股的ABC(总价 = $50.00)。当ABC宣布股票将2分一，代表您持有的每一股都将变成两股新股。您将拥有20股新股，每股成本$2.50(总价 = $50.00)。</p>
</li>
<li><p><strong>股息再投资</strong>：有些投资人选择将现金股息直接用来买进更多股份。虽然系统会自动帮您买进，您仍必须於Schedule D申报股息金额。卖出您新买的股票时您也必须要计算损益，以便申报所得税。</p>
</li>
<li><p><strong>共同基金发放收益</strong>：以正常收入方式计算税金。</p>
</li>
<li><p><strong>货币市场共同基金</strong>：每股通常固定为$1.00，卖出时也不需计算损益。投资此类型基金是为了股息收入。</p>
</li>
<li><p><strong>无价值证券</strong>：当一个公司下市或公布破产(如Enron、旧的K-Mart等等)，它的股票就会失去价值。您会发现这个股票开始没有交易量，同时代号变成一系列数字及字母。公司若经营不嘉，就是会有这个风险。若您不幸持有以下市获破产的公司股票，您可以要求将他由帐户内去除，并将全额亏损用来抵税。您的帐户处里掉这个无价值证券后，帐户明细单会出现一笔”penny for lot”交易。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文系转载备忘，<a href="http://www.firstrade.com/content/zh-cn/education/taxguide" target="_blank" rel="external">出处见此</a>。另外中国公民投资美股可以不用缴税，不过要填写免税申请表格。然而了解下美国的资本利得税制度有助于理解年底美国本土居民因为税收等原因卖出股票的行为。</p>
]]>
    
    </summary>
    
      <category term="理财" scheme="http://topdna.org/tags/investment/"/>
    
      <category term="理财" scheme="http://topdna.org/categories/investment/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac下常用软件推荐]]></title>
    <link href="http://topdna.org/tech/mac-software/"/>
    <id>http://topdna.org/tech/mac-software/</id>
    <published>2013-09-07T13:19:48.000Z</published>
    <updated>2013-12-22T13:13:14.000Z</updated>
    <content type="html"><![CDATA[<p>为了让Mac下工作更加得心应手， 也为了以后买mac的同学用起来方便，推荐一些我个人认为比较好的常用软件，权作抛砖引玉，欢迎大家不吝推荐补充，发掘出更多好的宝贝：</p>
<h1 id="1-_Homebrew">1. Homebrew</h1>
<p>url：<a href="http://brew.sh/" target="_blank" rel="external">http://brew.sh/</a><br>这个要重点推荐，懒人必备。Mac OS X 包管理工具. 类似于ubuntu下的apt-get install 可以用来取代mac ports，号称是最简单最灵活的安装gnu开源软件的管理器。安装起来也很简单，安装后直接通过类似：$ brew install wget 这样的命令就可以安装wget或者其他开源工具了。</p>
<h1 id="2-_Path_Finder">2. Path Finder</h1>
<p>用来替代系统自带的finder，原生finder居然没有command+x剪切功能, 用pathfinder这个操作就很直观而且还有“投放箱”，把来自不同目录的，需要移动的文件都丢进去，然后一次性移动，这些只是九牛一毛，其他功能还有很多很强大，用过就知道了。</p>
<h1 id="3-_Sublime_text_、Coda_、Eclipse、vim、">3. Sublime text 、Coda 、Eclipse、vim、</h1>
<p>coda相传是mac下最受欢迎的前端开发工具，我用过，不过当时不支持代码折叠，每次打开也没记住之前打开的文件，觉得不太方便，不知道现在如何了。Eclipse似乎更好些，当然也是重量级的。vim用得还不多，功能很强大不过学习曲线很陡，感兴趣的可以尝试下，也有很多插件。<br>不过我个人强烈推荐 Sublime text: 轻量级、启动速度快、现代、优雅、功能强大、N多插件，配合Package Control插件管理器，像瑞士军刀一样强大， 是我每天都会接触到也是最喜欢的编辑器。具体详情可以查看：<a href="http://www.sublimetext.com/" target="_blank" rel="external">http://www.sublimetext.com/</a></p>
<p><a id="more"></a></p>
<h1 id="4-_iTerm_2">4. iTerm 2</h1>
<p>url: <a href="http://www.iterm2.com/" target="_blank" rel="external">http://www.iterm2.com/</a><br>这个工具强烈推荐，是我上班开机后必开的工具之一了，当然跟个人工作习惯有关。iTerm2比mac自带的终端好太多而且更美更灵活，支持窗口水平、垂直拆分，可以很方便地缩放字体, 国际化支持很好、还有很多很灵活的配置。类似于Ubuntu下的Terminator，更新也比较快，很多细节的方面要用过才知道。截图如下：</p>
<center><img src="/resource/img/macsoft/01iterm2.png" alt="iterm2"></center>

<h1 id="5-_Alfred">5. Alfred</h1>
<p>这个也是提高效率的必备工具，功能很多，不过最常用的就是快速打开应用程序，不用在dock的应用程序列表或者lauchpad里面找半天，只需要通过option+space快捷键调出主窗口直接输入应用程序的首字母然后会自动匹配，可以通过 command + 数字键运行对应程序，或者直接回车即可。方便快捷。<br>还可以快速搜索，spotlight功能很强，不过用起来感觉比较“重”，直接在Alfred主窗口里面输入find “文件名” 就会动态匹配，速度很快，而且可以定制搜索范围。</p>
<center><img src="/resource/img/macsoft/02alfred.png" alt="Alfred"></center>

<h1 id="6-_xScope">6. xScope</h1>
<p>xScope是前端必备利器，虽然chrome或者firfox很多插件可以测量距离或者取色，不过要在网页中，PhotoShop用起来也很重，但是xScope可以很方便地取得屏幕上任意位置的颜色，有尺子，而且可以动态监测元素边界并显示距离（貌似是根据颜色差异区分边界的），而且还有设定屏幕分辨率，设定屏幕辅助线等功能。推荐大家试试。</p>
<center><img src="/resource/img/macsoft/03xscope1.png" alt="xScope 屏幕取色"></center><br><center><img src="/resource/img/macsoft/03xscope2.png" alt="xScope 尺寸测量"></center>

<h1 id="7-_DeltaWalker_&amp;_Araxis_merge">7. DeltaWalker &amp; Araxis merge</h1>
<p>两个都是很不错的用来替代windows下ultracompare的工具，推荐大家试试，不过DeltaWalker感觉稍微有点“重”,另外Kaleidoscope也不错的。</p>
<h1 id="8-_EasyFind">8. EasyFind</h1>
<p>不知道大家用过windows下的everything没有，这个就是跟everything类似的，无索引即时搜索，速度很快，轻量级的，非常好用。</p>
<center><img src="/resource/img/macsoft/08easyfind.png" alt="EasyFind"></center>

<h1 id="9-_DMGConverter">9. DMGConverter</h1>
<p>这个软件在特殊的场景下很有用： 某些DMG文件mount的时候需要输入密码，然后下次mount的时候还要再输⋯⋯，如果用系统自带的磁盘工具清除密码的话也挺麻烦的，有了这个软件就很方便了，可以将要解密的dmg文件批量拖到该应用的面板上，然后输入密码，软件就会自动把密码清除，另存为一个新的dmg文件，同时删掉源文件。遗憾的是每个软件都要输一次密码，不能设置默认密码，而且这个软件貌似已经很久没有更新了。</p>
<h1 id="10-_Adobe_Creative_Suite_5-5_Master_Collection、Pixelmator">10. Adobe Creative Suite 5.5 Master Collection、Pixelmator</h1>
<p>这个就不用太多解释了，用得最多的是Photoshop和fireworks。另外Pixelmator也是一个很不错的轻量级的ps替代软件，界面很漂亮。</p>
<h1 id="11-_ColorSchemer_Studio_2">11. ColorSchemer Studio 2</h1>
<p>一款很棒的调色工具，比较适合视觉设计师。</p>
<center><img src="/resource/img/macsoft/11ColorSchemer.png" alt="ColorSchemer Studio "></center>

<h1 id="12-_Moom">12. Moom</h1>
<p>这个工具会在你鼠标移动到窗口左上角最大化图标hover的时候给个扩展面板，你可以很方便地让应用铺满屏幕或者铺满左半边、右半边、或者将屏幕分成一些栅格铺满指定栅格数。</p>
<center><img src="/resource/img/macsoft/12moom.png" alt="Moom"></center>

<h1 id="13-_SuperFlexibleSynchronizer">13. SuperFlexibleSynchronizer</h1>
<p>如同它的名字那样，一个超级强大而且灵活的文件同步工具，可以设置定时任务定期将你的数据备份到指定地方。</p>
<h1 id="14-_Viewer_&amp;_LilyView">14. Viewer &amp; LilyView</h1>
<p>Mac自带的预览工具不能自动播放同一个目录下的所有图片，用起来不太方便，可以用Viewer替换，支持翻页、自动播放、全屏、系统开销很小，速度快。不过Viewer貌似很久没有更新了, 所以推荐大家使用LilyView，操作体验跟Viewer差不多,只是目前没有自动播放。</p>
<h1 id="15-_Virtualbox_&amp;_VMware">15. Virtualbox &amp; VMware</h1>
<p>两个很有名的虚拟机，前者开源、免费，后者还支持启动bootcamp分区的windows系统，这样不用重新建一个虚拟机了。为了测试网页在各个版本IE浏览器下的兼容性，虚拟机还是必不可少的。感觉virtualbox似乎要快些。</p>
<h1 id="16-_WriteRoom、iA_writer">16. WriteRoom、iA writer</h1>
<p>非常简洁优美的全屏写作软件，让你更加专注于写作，如果你有这个爱好的话。</p>
<p><center><img src="/resource/img/macsoft/16WriteRoom.png" alt="WriteRoom"></center><br>全屏写作帅呆了</p>
<h1 id="17-_AppZapper_&amp;_Clean_MyMac_&amp;_ccleaner">17. AppZapper &amp; Clean MyMac &amp; ccleaner</h1>
<p>应用软件卸载、清理、系统优化等等。</p>
<h1 id="18-_Blueharvest">18. Blueharvest</h1>
<p>BlueHarvest 可以从您的 U盘，音乐播放器,SD卡和文件服务器等设备中自动删除 DS<em>Store 和 </em> AppleDouble 文件。你也可以在任何磁盘或者文件点击右键选择 “使用 BlueHarvest 清理”来清理垃圾文件。</p>
<h1 id="19-_Snippets_&amp;_Snippet">19. Snippets &amp; Snippet</h1>
<p>代码片段搜集管理工具，之前尝试过很多类似的工具，不过这两款比较喜欢，各有特色，支持编程语言比较多。个人更倾向于Snippets。</p>
<h1 id="20-_Firefox_&amp;_Chrome">20. Firefox &amp; Chrome</h1>
<p>应该很多人都装了。更喜欢Chrome一些，速度更快，而且本身的Web开发者工具很不错。</p>
<h1 id="21-_NovaMind_Pro_&amp;_OmniGraffle">21. NovaMind Pro &amp; OmniGraffle</h1>
<p>两个都是很不错的思维导图、流程图制作工具，强烈推荐。MindNode Pro也还行，不过功能相对少了些。</p>
<h1 id="22-_Balsamiq_Mockups">22. Balsamiq Mockups</h1>
<p>Balsamiq Mockups是一个不错的快速原型工具，对于IT从业者，尤其产品经理之类的人来说很实用的，个人觉得它的用户体验比较好，做出来的东西挺漂亮的。</p>
<h1 id="23-_AliWangwang">23. AliWangwang</h1>
<p>工作必备，还有一些淘宝爱好者也离不了，无须多言。</p>
<h1 id="24-_Transmit">24. Transmit</h1>
<p>不单单是ftp客户端，还支持sftp，Amazon S3，WebDAV等。</p>
<h1 id="25-_Audio_Hijack">25. Audio Hijack</h1>
<p>录音软件，支持各种播放器，甚至网页视频、音频中的声音录制。</p>
<h1 id="26-_Navicat">26. Navicat</h1>
<p>mac下的数据库客户端，有很多个版本，分别针对不同的数据库，也有windows版的，用起来很方便。</p>
<h1 id="27-_QQ_for_mac">27. QQ for mac</h1>
<p>这个就不说了，现在做得还是挺不错的，比windows版简洁。</p>
<h1 id="28-_Paragon_ntfs_for_mac">28. Paragon ntfs for mac</h1>
<p>让你的mac更好地支持对ntfs分区的读写。在系统偏好设置面板里面会加一个入口，可以设定下次启动windows系统，如果安装了的话。</p>
<h1 id="29-_Growl">29. Growl</h1>
<p>Mac OS X 系统下非常实用的信息提示软件，它能在苹果电脑屏幕角落显示各种实用的应用程序的运行提示。比如：上传/下载完成，解压缩完毕，收到邮件······。事实上由于 Growl 相当好用且出名，很多软件都默认以它做为提示工具。</p>
<h1 id="30-_Perian">30. Perian</h1>
<p>视频、音频解码器包，解码器里面的瑞士军刀，可以让你的系统支持更多视频、音频格式。</p>
<h1 id="31-_SPlayerX_&amp;_MplayerX_&amp;_VLC_2">31. SPlayerX &amp; MplayerX &amp; VLC 2</h1>
<p>Mac下的射手播放器，支持字幕外挂、或者自动搜索下载字幕。对于喜欢从网上找盗版电影看的人来说还是很方便的——自动帮你找好字幕。</p>
<h1 id="32-_虾米音乐">32. 虾米音乐</h1>
<p>虾米音乐Mac客户端还是挺不错的，有免费的音乐听不是坏事，而且全屏以后还挺漂亮的，推荐大家试试。</p>
<h1 id="33-_Speed_download">33. Speed download</h1>
<p>非常有名的下载工具，不过破解版的容易崩溃，是不是破解比较难来着？另外迅雷最新版本也还行，虽然某些人可能不太喜欢。</p>
<h1 id="34-_Dropbox">34. Dropbox</h1>
<p>一直用这个来同步多台机子中的数据，有windows，ubuntu，mac客户端。不过以后貌似可以用iCloud替换了。</p>
<h1 id="35-_微软的Office办公套件">35. 微软的Office办公套件</h1>
<p>这个就不用说了吧？</p>
<h1 id="36-_iAlertU、Find_my_Mac、Prey">36. iAlertU、Find my Mac、Prey</h1>
<p>一个很强的mac报警器，笔记本防盗软件. 当软件激活后 如果对笔记本进行任何操作：包括搬动(需要新款MacBook或MacBook Pro) 都会发出报警声，并且可以拍摄照片.将照片发到指定邮箱。<br>类似的还有icloud 提供的Find my Mac功能，以及<a href="http://preyproject.com/" target="_blank" rel="external">http://preyproject.com/</a> 提供的prey for Mac。</p>
<h1 id="37-_中文输入法sogou_Input_Mac版、百度中文输入法mac版">37. 中文输入法sogou Input Mac版、百度中文输入法mac版</h1>
<p>之前一直用FIT的，不过自从sogou出了mac版以后用sogou多一些，还可以支持换肤哦，不错的。另外，据说百度输入法mac版也不错，没怎么试过。</p>
<h1 id="38-_1password">38. 1password</h1>
<p>密码管理器。用来收集保存密码的，口碑很好。可以试试。</p>
<h1 id="39-_CheatSheet、keyCue">39. CheatSheet、keyCue</h1>
<p>按住command键几秒钟不要松手，即可显示当前正在使用的软件的可用快捷键。非常方便哈。keyCue也有类似的功能，不过CheatSheet的用户体验貌似要好些。</p>
<h1 id="40-_Mou">40. Mou</h1>
<p>所见即所得的markdown编辑器。</p>
<h1 id="41-_Ecoute">41. Ecoute</h1>
<p>iTunes不能记住上次播放到哪个歌曲了，不过这个可以，不过界面算不上很漂亮。</p>
<h1 id="42-_ImageOptim">42. ImageOptim</h1>
<p>再加一个吧：ImageOptim，一个图像自动压缩优化工具，如果你是一个前端攻城狮或者有个个人博客之类需要展示一些图片，那么在此之前先将其压缩下还是不错的，有了ImageOptim你只需要将图片拖放到它的窗口里面剩下的它会自动处理好，不过默认情况下它会自动用压缩后的图片替换原图，所以记得先备份，当然如果你不在乎图片大小也就无所谓啦。</p>
<p>还有什么好东西么？热烈欢迎大家补充！</p>
]]></content>
    <summary type="html">
    <![CDATA[Mac下常用软件推荐]]>
    
    </summary>
    
      <category term="技术" scheme="http://topdna.org/tags/tech/"/>
    
      <category term="技术" scheme="http://topdna.org/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reading List (to Be Continued)]]></title>
    <link href="http://topdna.org/investment/reading-list/"/>
    <id>http://topdna.org/investment/reading-list/</id>
    <published>2013-09-03T22:08:10.000Z</published>
    <updated>2014-10-13T05:19:51.000Z</updated>
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/resource/style/jquery.handsontable.css">

<link rel="stylesheet" type="text/css" href="/resource/style/style.css">

<script type="text/javascript" charset="utf-8" src="/resource/js/lib/jquery.handsontable.js"></script>

<p>书籍阅读列表及计划…… (Since 2012/07)</p>
<a id="more"></a>

<div class="reading-list" id="reading-list"></div>


<script>
    var data = [
      {id : 1 , name: "富爸爸穷爸爸"             , author: "罗伯特·清崎 等" , readingDate: "About 2012/07", star:4, isRead: 'Y'},
      {id : 2 , name: "30年后你拿什么养活自己？I"  , author: "高得诚等"      , readingDate: "About 2012/07", star:4, isRead: 'Y'},
      {id : 3 , name: "30年后你拿什么养活自己？II" , author: "高得诚等"      , readingDate: "About 2012/08", star:3, isRead: 'Y'},
      {id : 4 , name: "情商"                    , author: "丹尼尔•格尔曼"  , readingDate: "About 2012/08", star:4, isRead: 'Y'},
      {id : 5 , name: "情商II"                  , author: "丹尼尔•格尔曼"  , readingDate: "About 2012/09", star:4, isRead: 'Y'},
      {id : 6 , name: "彼得林奇的成功投资"        , author: "彼得•林奇"      , readingDate: "About 2012/09", star:5, isRead: 'Y'},
      {id : 7 , name: "聪明的投资者"             , author: "本杰明•格雷厄姆" , readingDate: "About 2012/10", star:5, isRead: 'Y'},
      {id : 8 , name: "西施的财富 I"             , author: "习风"          , readingDate: "About 2012/10", star:5, isRead: 'Y'},
      {id : 9 , name: "西施的财富 II"            , author: "习风"          , readingDate: "About 2012/10", star:3, isRead: 'Y'},
      {id : 10, name: "冷读术"                  , author: "石真语"         , readingDate: "About 2012/11", star:2, isRead: 'Y'},
      {id : 11, name: "怎样选择成长股"            , author: "路易斯•纳维里尔" , readingDate: "About 2012/12", star:3, isRead: 'Y'},
      {id : 12, name: "投资最重要的事"            , author: "霍华德•马克斯"   , readingDate: "About 2013/01", star:3, isRead: 'Y'},
      {id : 13, name: "性格色彩"                 , author: "乐嘉"          , readingDate: "About 2013/03", star:4, isRead: 'Y'},
      {id : 14, name: "乔布斯传"                 , author: "沃尔特•艾萨克森" , readingDate: "About 2013/03", star:4, isRead: 'Y'},
      {id : 15, name: "货币战争"                 , author: "宋鸿兵"         , readingDate: "About 2013/04", star:4, isRead: 'Y'},
      {id : 16, name: "基业长青"                 , author: "吉姆•柯林斯 等"  , readingDate: "About 2013/06", star:5, isRead: 'Y'},
      {id : 17, name: "精益创业"                 , author: "埃里克•莱斯"     , readingDate: "About 2013/06", star:5, isRead: 'Y'},
      {id : 18, name: "中国改革新思维"            , author: "李佐军"         , readingDate: "About 2013/07", star:4, isRead: 'Y'},
      {id : 19, name: "大空头"                   , author: "刘易斯"          , readingDate: "2013/09/06~09/09", star:4, isRead: 'Y'},
      {id : 20, name: "定位"                    , author: "[美] 艾·里斯"     , readingDate: "2013/12~2014/02", star:4, isRead: 'Y'},
      {id : 21, name: "资本之王"                 , author: "戴维•凯里等著"    , readingDate: "2013/09/08~?", star:0, isRead: 'N'},
      {id : 22, name: "传习录"                  , author: "[明] 王阳明"     , readingDate: "About 2013/08", star:5, isRead: 'N'},
      {id : 23, name: "经济学的思维方式"          , author: "保罗•海恩等"      , readingDate: "", star:0, isRead: 'N'},
      {id : 24, name: "大而不倒"                 , author: "安德鲁•罗斯•索尔金", readingDate: "", star:0, isRead: 'N'},
      {id : 25, name: "设计中的设计"              , author: "原研哉"          , readingDate: "2014/05/31", star:3, isRead: 'Y'},
      {id : 26, name: "解密"                     , author: "麦家"          , readingDate: "2014/09/27", star:3, isRead: 'Y'}
    ];

    var readRender = function (instance, td, row, col, prop, value, cellProperties) {
      if(value === 'Y') {
        $(td).empty().append('已读').addClass('finished');
      }else if(value === 'I'){
        $(td).empty().append('在读').addClass('in-reading');
      }else if(value === 'N'){
        $(td).empty().append('未读').addClass('waiting-list');
      }else{
        Handsontable.TextCell.renderer.apply(this, arguments);
      }
      $(td).addClass('htDimmed');
      return td;
    };

    var starRender = function (instance, td, row, col, prop, value, cellProperties) {
        var stars = '★★★★★';
        if(value){
            $(td).empty().append(stars.substring(5 - value));
        }else{
            $(td).empty();
        }
        $(td).addClass('htDimmed star');
    };

    var $container = $("#reading-list");
    $container.handsontable({
      data                  : data,
      // startRows          : 5,
      maxRows               : 25,
      colHeaders            : true,
      // rowHeaders         : true,
      minSpareRows          : 1,
      currentRowClassName   : 'currentRow',
      currentColClassName   : 'currentCol',
      // manualColumnMove   : true,
      // manualColumnResize : true,
      // persistentState    : true,
      columnSorting         : true,
      colWidths             : [45, 240, 130, 120, 80, 60],
      colHeaders            : ['编号', '书名', '作者', '阅读时间','推荐等级','阅读状态'],
      contextMenu           : false,
      columns: [
        {readOnly:true, data: 'id', type: 'text'},
        {readOnly:true, data: 'name'},
        {readOnly:true, data: 'author'},
        {readOnly:true, data: 'readingDate'},
        {readOnly:true, data: 'star', type: {renderer: starRender}},
        {readOnly:true, data: 'isRead', type: {renderer: readRender}}
      ]
    });
</script>

<h2 id="Notice:">Notice:</h2>
<ul>
<li>有段时间没看书了，太忙了，一直在忙着创建这个美股投资相关网站：<a href="http://traceinvest.com" target="_blank" rel="external">http://traceinvest.com</a> ，欢迎访问。</li>
<li>推荐等级实为个人主观感受，谨慎参考</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[现在不学习投资理财，30年后你拿什么养活自己？]]>
    
    </summary>
    
      <category term="读书" scheme="http://topdna.org/tags/reading/"/>
    
      <category term="理财" scheme="http://topdna.org/tags/investment/"/>
    
      <category term="生活" scheme="http://topdna.org/tags/life/"/>
    
      <category term="理财" scheme="http://topdna.org/categories/investment/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Domain for Sale——Kindwill.Com]]></title>
    <link href="http://topdna.org/tech/kindwill-domain-for-sale/"/>
    <id>http://topdna.org/tech/kindwill-domain-for-sale/</id>
    <published>2013-09-01T11:58:33.000Z</published>
    <updated>2013-09-20T22:02:07.000Z</updated>
    <content type="html"><![CDATA[<p><strong><a href="http://kindwill.com" target="_blank" rel="external">kindwill.com</a></strong> 域名转手，需要的可速与我联系，请邮件至: hustcer(at)gmail#com<br>注：将(at)替换为 @, 将 # 替换为 . 即可</p>
<p><strong>kind</strong></p>
<ul>
<li>音: [kaɪnd]</li>
<li>义: adj.亲切的；善良的；仁慈的；宽容的</li>
</ul>
<p><strong>will</strong></p>
<ul>
<li>音: [wɪl]</li>
<li>义: n.决心；意志；遗嘱；愿望</li>
</ul>
<ol>
<li>所以kindwill可以用来作为慈善事业网站；</li>
<li>而且可以汉语音译为“全得味”作为餐饮类网站也不错的哈；</li>
<li>或者音译为“金的味”、“钱的味”作为投资理财类网站，顺便彰显下赤裸裸的拜金主义；</li>
<li>当然也可以音译为“千德威尔”之类的，没有什么特殊含义，一切内涵等你来赋予；</li>
</ol>
<p>这么简单、优美、好记的域名还在犹豫什么呢？，赶快行动吧！</p>
<hr>
<h3 id="Domain_for_Sale:_kindwill-com">Domain for Sale: kindwill.com</h3>
<p>It’s really a nice domain, do you want it? You can contact me through email: hustcer(at)gmail#com<br>Note: Please replace ‘(at)’ with ‘@’, and ‘#’ with ‘.’</p>
]]></content>
    <summary type="html">
    <![CDATA[kindwill.com 域名出售，需要的抓紧啦]]>
    
    </summary>
    
      <category term="技术" scheme="http://topdna.org/tags/tech/"/>
    
      <category term="技术" scheme="http://topdna.org/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sublime Text Shortcuts for Mac Os]]></title>
    <link href="http://topdna.org/tech/sublime-shortcuts/"/>
    <id>http://topdna.org/tech/sublime-shortcuts/</id>
    <published>2013-08-31T04:16:56.000Z</published>
    <updated>2013-09-20T12:41:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Editing">Editing</h2>
<ul>
<li>推荐使用最新版本的Chrome/Safari或者Firefox浏览器浏览此页，否则Mac按键可能无法正常展示</li>
<li>The Latest Version of Chrome/Safari or Firefox is Recommeded.</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Keypress</th>
<th style="text-align:left">Command</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">⌘ + X</td>
<td style="text-align:left">Delete line</td>
</tr>
<tr>
<td style="text-align:left">⌃ + ⇧ + K</td>
<td style="text-align:left">Delete line</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ↩</td>
<td style="text-align:left">Insert line after</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⇧ + ↩</td>
<td style="text-align:left">Insert line before</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌃ + ↑</td>
<td style="text-align:left">Move line/selection up</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌃ + ↓</td>
<td style="text-align:left">Move line/selection down</td>
</tr>
<tr>
<td style="text-align:left">⌘ + L</td>
<td style="text-align:left">Select line - Repeat to select next lines</td>
</tr>
<tr>
<td style="text-align:left">⌘ + D</td>
<td style="text-align:left">Select word - Repeat select others occurrences</td>
</tr>
<tr>
<td style="text-align:left">⌃ + M</td>
<td style="text-align:left">Jump to closing parentheses Repeat to jump to opening parentheses</td>
</tr>
<tr>
<td style="text-align:left">⌘ + K, ⌘ + K</td>
<td style="text-align:left">Delete from cursor to end of line</td>
</tr>
<tr>
<td style="text-align:left">⌃ + K</td>
<td style="text-align:left">Delete from cursor to end of line</td>
</tr>
<tr>
<td style="text-align:left">⌘ + [K] + ⌫</td>
<td style="text-align:left">Delete from cursor to start of line</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ]</td>
<td style="text-align:left">Indent current line(s)</td>
</tr>
<tr>
<td style="text-align:left">⌘ + [</td>
<td style="text-align:left">Un-indent current line(s)</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⇧ + D</td>
<td style="text-align:left">Duplicate line(s)</td>
</tr>
<tr>
<td style="text-align:left">⌘ + J</td>
<td style="text-align:left">Join line below to the end of the current line</td>
</tr>
<tr>
<td style="text-align:left">⌘ + /</td>
<td style="text-align:left">Comment/un-comment current line</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌥ + /</td>
<td style="text-align:left">Block comment current selection</td>
</tr>
<tr>
<td style="text-align:left">⌘ + Y</td>
<td style="text-align:left">Redo, or repeat last keyboard shortcut command</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⇧ + V</td>
<td style="text-align:left">Paste and indent correctly</td>
</tr>
<tr>
<td style="text-align:left">⌃ + Space</td>
<td style="text-align:left">Select next auto-complete suggestion</td>
</tr>
<tr>
<td style="text-align:left">⌘ + Z</td>
<td style="text-align:left">Undo</td>
</tr>
<tr>
<td style="text-align:left">⌘ + Y</td>
<td style="text-align:left">Redo insert snippet</td>
</tr>
<tr>
<td style="text-align:left">⌘ + U</td>
<td style="text-align:left">Soft undo; jumps to your last change before undoing change when repeated</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⇧ + U</td>
<td style="text-align:left">Soft redo (movement redo)</td>
</tr>
<tr>
<td style="text-align:left">⌃ + T</td>
<td style="text-align:left">Swap two letters or, better yet, two words</td>
</tr>
<tr>
<td style="text-align:left">——<em>———</em>————</td>
</tr>
</tbody>
</table>
<a id="more"></a>

<h2 id="Navigation/Goto_Anywhere">Navigation/Goto Anywhere</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Keypress</th>
<th style="text-align:left">Command</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">⌘ + P</td>
<td style="text-align:left">Quick-open files by name</td>
</tr>
<tr>
<td style="text-align:left">⌘ + R</td>
<td style="text-align:left">Goto symbol、go to methods</td>
</tr>
<tr>
<td style="text-align:left">⌃ + G</td>
<td style="text-align:left">Goto line in current file</td>
</tr>
<tr>
<td style="text-align:left">⌘ + T</td>
<td style="text-align:left">Go to file</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌃ + P</td>
<td style="text-align:left">Go to project</td>
</tr>
<tr>
<td style="text-align:left">⌘ + Left/Right</td>
<td style="text-align:left">Go to Beginning or End of Line</td>
</tr>
<tr>
<td style="text-align:left">⌥ + Left/Right</td>
<td style="text-align:left">Move between words</td>
</tr>
<tr>
<td style="text-align:left">⌃ + L</td>
<td style="text-align:left">Scroll to selection</td>
</tr>
<tr>
<td style="text-align:left">⌃ + M</td>
<td style="text-align:left">Jump to matching bracket</td>
</tr>
<tr>
<td style="text-align:left">⌃ + Tab</td>
<td style="text-align:left">Next file in stack</td>
</tr>
<tr>
<td style="text-align:left">⌃ + ⇧ + Tab</td>
<td style="text-align:left">Previous file in stack</td>
</tr>
<tr>
<td style="text-align:left">——<em>———</em>————</td>
</tr>
</tbody>
</table>
<h2 id="General">General</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Keypress</th>
<th style="text-align:left">Command</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">⌘ + ⇧ + P</td>
<td style="text-align:left">Command prompt, Command palette</td>
</tr>
<tr>
<td style="text-align:left">⌘ + K, ⌘ + B</td>
<td style="text-align:left">Toggle side bar</td>
</tr>
<tr>
<td style="text-align:left">⌃ + ⇧ + P</td>
<td style="text-align:left">Show scope in status bar</td>
</tr>
<tr>
<td style="text-align:left">⌃ + `</td>
<td style="text-align:left">Python console</td>
</tr>
<tr>
<td style="text-align:left">⌘ + =</td>
<td style="text-align:left">Larger Text</td>
</tr>
<tr>
<td style="text-align:left">⌘ + -</td>
<td style="text-align:left">Smaller Text</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌃ + F</td>
<td style="text-align:left">Enter full screen</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⇧ + ⌃ + F</td>
<td style="text-align:left">Enter distraction free mode</td>
</tr>
<tr>
<td style="text-align:left">⌘ + M</td>
<td style="text-align:left">Minimize</td>
</tr>
<tr>
<td style="text-align:left">⌥ + ⌘ + M</td>
<td style="text-align:left">Minimize all</td>
</tr>
<tr>
<td style="text-align:left">⌃ + Q</td>
<td style="text-align:left">Record macro</td>
</tr>
<tr>
<td style="text-align:left">⌃ + ⇧ + Q</td>
<td style="text-align:left">Play back macro</td>
</tr>
<tr>
<td style="text-align:left">——<em>———</em>————</td>
</tr>
</tbody>
</table>
<h2 id="Find/Replace">Find/Replace</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Keypress</th>
<th style="text-align:left">Command</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">⌘ + F</td>
<td style="text-align:left">Find</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌥ + F</td>
<td style="text-align:left">Replace</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌥ + E</td>
<td style="text-align:left">Replace next</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⇧ + F</td>
<td style="text-align:left">Find in files</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌥ + G, ⌘ + G</td>
<td style="text-align:left">Find next occurrence of current word</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⇧ + G</td>
<td style="text-align:left">Find previous occurrence of current word</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌃ + G</td>
<td style="text-align:left">Select all occurrences of current word for multiple editing</td>
</tr>
<tr>
<td style="text-align:left">⌘ + I</td>
<td style="text-align:left">Incremental find</td>
</tr>
<tr>
<td style="text-align:left">⌘ + D</td>
<td style="text-align:left">Quick add next</td>
</tr>
<tr>
<td style="text-align:left">⌘ + E</td>
<td style="text-align:left">Use selection for find</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⇧ + E</td>
<td style="text-align:left">Use selection for replace</td>
</tr>
<tr>
<td style="text-align:left">——<em>———</em>————</td>
</tr>
</tbody>
</table>
<h2 id="File_Operation">File Operation</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Keypress</th>
<th style="text-align:left">Command</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">⌘ + N</td>
<td style="text-align:left">New file</td>
</tr>
<tr>
<td style="text-align:left">⌘ + O</td>
<td style="text-align:left">Open file</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⇧ + T</td>
<td style="text-align:left">Reopen closed file</td>
</tr>
<tr>
<td style="text-align:left">⌘ + S</td>
<td style="text-align:left">Save file</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⇧+ S</td>
<td style="text-align:left">Save as…</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌥ + S</td>
<td style="text-align:left">Save all</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⇧+ N</td>
<td style="text-align:left">New window</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⇧+ W</td>
<td style="text-align:left">Close window</td>
</tr>
<tr>
<td style="text-align:left">⌘ + W</td>
<td style="text-align:left">Close file</td>
</tr>
<tr>
<td style="text-align:left">——<em>———</em>————</td>
</tr>
</tbody>
</table>
<h2 id="Selection">Selection</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Keypress</th>
<th style="text-align:left">Command</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">⇧ + ⌃ + ↑</td>
<td style="text-align:left">Add previous line</td>
</tr>
<tr>
<td style="text-align:left">⇧ + ⌃ + ↓</td>
<td style="text-align:left">Add next line</td>
</tr>
<tr>
<td style="text-align:left">⌘ + A</td>
<td style="text-align:left">Select all</td>
</tr>
<tr>
<td style="text-align:left">⌘ + L</td>
<td style="text-align:left">Expand selection to line</td>
</tr>
<tr>
<td style="text-align:left">⌘ + D</td>
<td style="text-align:left">Expand selection to word</td>
</tr>
<tr>
<td style="text-align:left">⌃ + ⇧+ M</td>
<td style="text-align:left">Expand selection to brackets</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⇧+ J</td>
<td style="text-align:left">Expand selection to indentation</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⇧+ A</td>
<td style="text-align:left">Expand selection to Tag</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⇧+ L</td>
<td style="text-align:left">Select lines, and then split it into many selections, one per line</td>
</tr>
<tr>
<td style="text-align:left">⇧ + Left/Right</td>
<td style="text-align:left">Add or remove word selection</td>
</tr>
<tr>
<td style="text-align:left">Esc</td>
<td style="text-align:left">Go from multiple selections to a single selection</td>
</tr>
<tr>
<td style="text-align:left">——<em>———</em>————</td>
</tr>
</tbody>
</table>
<h2 id="Tabs">Tabs</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Keypress</th>
<th style="text-align:left">Command</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">⌘ + ⇧ + t</td>
<td style="text-align:left">Open last closed tab</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌥ + ←</td>
<td style="text-align:left">Cycle up through tabs</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌥ + ➝</td>
<td style="text-align:left">Cycle down through tabs</td>
</tr>
<tr>
<td style="text-align:left">——<em>———</em>————</td>
</tr>
</tbody>
</table>
<h2 id="Split_window">Split window</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Keypress</th>
<th style="text-align:left">Command</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">⌘ + ⌥ + 2</td>
<td style="text-align:left">Split view into two columns</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌥ + 1</td>
<td style="text-align:left">Revert view to single column</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌥ + 5</td>
<td style="text-align:left">Set view to grid (4 groups)</td>
</tr>
<tr>
<td style="text-align:left">⌃ + [NUM]</td>
<td style="text-align:left">Jump to group where num is 1-4</td>
</tr>
<tr>
<td style="text-align:left">⌃ + ⇧ + [NUM]</td>
<td style="text-align:left">Move file to specified group where num is 1-4</td>
</tr>
<tr>
<td style="text-align:left">⌘ + [1,2,3…]</td>
<td style="text-align:left">Select tab</td>
</tr>
<tr>
<td style="text-align:left">——<em>———</em>————</td>
</tr>
</tbody>
</table>
<h2 id="Bookmarks">Bookmarks</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Keypress</th>
<th style="text-align:left">Command</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">⌘ + F2</td>
<td style="text-align:left">Toggle bookmark</td>
</tr>
<tr>
<td style="text-align:left">F2  Next</td>
<td style="text-align:left">bookmark</td>
</tr>
<tr>
<td style="text-align:left">⇧ + F2</td>
<td style="text-align:left">Previous bookmark</td>
</tr>
<tr>
<td style="text-align:left">⇧ + ⌘ + F2</td>
<td style="text-align:left">Clear bookmarks</td>
</tr>
<tr>
<td style="text-align:left">——<em>———</em>————</td>
</tr>
</tbody>
</table>
<h2 id="Text_manipulation">Text manipulation</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Keypress</th>
<th style="text-align:left">Command</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">⌘ + K, ⌘ + U</td>
<td style="text-align:left">Transform to Uppercase</td>
</tr>
<tr>
<td style="text-align:left">⌘ + K, ⌘ + L</td>
<td style="text-align:left">Transform to Lowercase</td>
</tr>
<tr>
<td style="text-align:left">F5</td>
<td style="text-align:left">Sort lines</td>
</tr>
<tr>
<td style="text-align:left">⌃ + F5</td>
<td style="text-align:left">Sort lines(case sensitive)</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌥ + T</td>
<td style="text-align:left">Special characters</td>
</tr>
<tr>
<td style="text-align:left">——<em>———</em>————</td>
</tr>
</tbody>
</table>
<h2 id="XML/HTML">XML/HTML</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Keypress</th>
<th style="text-align:left">Command</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">⌘ + ⇧ + A</td>
<td style="text-align:left">Select content into tag</td>
</tr>
<tr>
<td style="text-align:left">⌘ + ⌥ + .</td>
<td style="text-align:left">Close tag</td>
</tr>
<tr>
<td style="text-align:left">⌃ + ⇧ + W</td>
<td style="text-align:left">Wrap the selected text in the HTML tag</td>
</tr>
<tr>
<td style="text-align:left">——<em>———</em>————</td>
</tr>
</tbody>
</table>
<h2 id="Marks">Marks</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Keypress</th>
<th style="text-align:left">Command</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">⌘ + K + space</td>
<td style="text-align:left">Set mark // ⌘K; for me</td>
</tr>
<tr>
<td style="text-align:left">⌘ + K + W</td>
<td style="text-align:left">Delete from cursor to mark</td>
</tr>
<tr>
<td style="text-align:left">⌘ + K + A</td>
<td style="text-align:left">Select from cursor to mark</td>
</tr>
<tr>
<td style="text-align:left">⌘ + K + G</td>
<td style="text-align:left">Clear mark</td>
</tr>
<tr>
<td style="text-align:left">——<em>———</em>————</td>
</tr>
</tbody>
</table>
<p>REF:</p>
<ol>
<li><a href="http://www.sublimetext.com/docs/2/index.html" target="_blank" rel="external">http://www.sublimetext.com/docs/2/index.html</a></li>
<li><a href="http://docs.sublimetext.info/en/latest/index.html" target="_blank" rel="external">http://docs.sublimetext.info/en/latest/index.html</a></li>
<li><a href="https://tutsplus.com/course/improve-workflow-in-sublime-text-2/" target="_blank" rel="external">https://tutsplus.com/course/improve-workflow-in-sublime-text-2/</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[Sublime Text Shortcuts for Mac OS]]>
    
    </summary>
    
      <category term="技术" scheme="http://topdna.org/tags/tech/"/>
    
      <category term="技术" scheme="http://topdna.org/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Art Gallery]]></title>
    <link href="http://topdna.org/misc/art-gallery/"/>
    <id>http://topdna.org/misc/art-gallery/</id>
    <published>2013-08-25T12:46:54.000Z</published>
    <updated>2014-07-22T12:27:22.000Z</updated>
    <content type="html"><![CDATA[<h4 id="美图橱窗Demo，点击可查看大图哈">美图橱窗Demo，点击可查看大图哈</h4>
<div class="clearfix"><br>    <img width="60" height="100" class="alignleft imgbox" src="/resource/img/art/art_01.jpg" alt=""> <img width="60" height="100" class="alignleft imgbox" src="/resource/img/art/art_02.jpg" alt=""> <img width="60" height="100" class="alignleft imgbox" src="/resource/img/art/art_03.jpg" alt=""> <img width="60" height="100" class="alignleft imgbox" src="/resource/img/art/art_04.jpg" alt=""> <img width="60" height="100" class="alignleft imgbox" src="/resource/img/art/art_05.jpg" alt=""> <img width="60" height="100" class="alignleft imgbox" src="/resource/img/art/art_06.jpg" alt=""> <img width="60" height="100" class="alignleft imgbox" src="/resource/img/art/art_07.jpg" alt=""> <img width="60" height="100" class="alignleft imgbox" src="/resource/img/art/art_08.jpg" alt=""> <img width="60" height="100" class="alignleft imgbox" src="/resource/img/art/art_09.jpg" alt=""> <img width="60" height="100" class="alignleft imgbox" src="/resource/img/art/art_10.jpg" alt=""> <img width="60" height="100" class="alignleft imgbox" src="/resource/img/art/art_11.jpg" alt=""> <img width="60" height="100" class="alignleft imgbox" src="/resource/img/art/art_12.jpg" alt=""><br></div>
]]></content>
    <summary type="html">
    <![CDATA[手机壁纸图片, art gallery]]>
    
    </summary>
    
      <category term="其他" scheme="http://topdna.org/tags/misc/"/>
    
      <category term="其他" scheme="http://topdna.org/categories/misc/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java Script 编码规范]]></title>
    <link href="http://topdna.org/tech/js-style/"/>
    <id>http://topdna.org/tech/js-style/</id>
    <published>2013-08-25T07:07:42.000Z</published>
    <updated>2013-09-06T08:16:26.000Z</updated>
    <content type="html"><![CDATA[<h4 id="以下文档大多来自:">以下文档大多来自:</h4>
<ul>
<li><a href="http://wyz.67ge.com/google-js/javascriptguide.xml" target="_blank" rel="external">Google JavaScript 编码规范指南</a></li>
<li><a href="https://github.com/rwldrn/idiomatic.js/tree/master/translations/zh_CN" target="_blank" rel="external">Idiomatic 风格</a></li>
</ul>
<h4 id="参考规范">参考规范</h4>
<ul>
<li><a href="http://es5.github.com/" target="_blank" rel="external">ECMAScript 5.1 注解版</a></li>
<li><a href="http://ecma-international.org/ecma-262/5.1/" target="_blank" rel="external">EcmaScript 语言规范, 5.1 版</a></li>
</ul>
<h4 id="基本原则:_无论有多少人在维护，所有在代码仓库中的代码理应看起来像同一个人写的。">基本原则: 无论有多少人在维护，所有在代码仓库中的代码理应看起来像同一个人写的。</h4>
<h2 id="前言">前言</h2>
<p>下面的章节描述的是一个 <em>合理</em> 的现代 JavaScript 开发风格指南，并非硬性规定。其想送出的核心理念是<em>高度统一的代码风格</em>（the law of code style consistency）。你为项目所择风格都应为最高准则。作为一个描述放置于你的项目中，并链接到这个文档作为代码风格一致性、可读性和可维护性的保证。</p>
<h2 id="规范概要">规范概要</h2>
<ol>
<li>JS/CSS 文件编码统一采用 UTF8编码</li>
<li>代码缩进使用4个空格缩进替代 tab 缩进</li>
<li>一行代码长度尽量保持80列左右</li>
<li>如果编辑器支持在文件保存的时候自动删除行末和空行中的空格(注意:要么全部采用，要么全不采用，否则会产生过多的diff信息)</li>
<li>JS/CSS 最终发布到产品中的时候需要被压缩，以减小静态资源文件大小，提升页面加载速度</li>
<li>JS里声明变量必须加上 var 关键字，推荐一个 var 同时声明多个变量，或者一组有逻辑关系的变量，避免一个变量一个 var.</li>
<li>使用 Array 和 Object 语法直接声明并将其初始化,更易读且性能更好, 而不使用 Array 和 Object 构造器.</li>
<li>JS里使用单引号 (‘) 优于双引号 (“).</li>
<li>JS代码结尾统一约定加’;’</li>
<li>没有特殊原因避免使用 with/eval</li>
<li>对于if/else等后面的语句即使只有一行代码也需要在该行代码的首尾加上’{}’.</li>
<li>字符串拼接在少量(次数为个位数)的情况下可以使用’+’, 大量的时候使用数组 join(), 或者尽可能采用模板引擎渲染：比如jsRender等, 如果是Extjs可以采用XTemplate.</li>
<li>对于数组赋值操作快于 push()操作, 所以尽量使用赋值操作.</li>
<li>for循环遍历：for(var i = 0, l = arr.length; i &lt; l; i++){// doSomething here } 采用这种方式而不是 i &lt; arr.length, 前一种方式只会计算一次 arr 的长度，而后一种方式会计算数组长度 arr.length + 1 次，效率比较低</li>
<li>字符串转换为整数，推荐使用 parseInt(num, 10) 这种方式，+num 写法简单，在操作次数极少的情况下也可以酌情使用。</li>
<li>变量比较的时候总是判断最好、最精确的值，推荐使用’===’少用’==’(可以参考<a href="https://github.com/jquery/jquery/blob/master/src/core.js" target="_blank" rel="external">jQuery</a>代码里面, 可以看到只有在’== null’的时候才可能使用’==’，其他情况一律使用的是’===’).</li>
<li>JS里变量命名规范使用 functionNamesLikeThis, variableNamesLikeThis, ClassNamesLikeThis, EnumNamesLikeThis, methodNamesLikeThis, 和 SYMBOLIC_CONSTANTS_LIKE_THIS, 尤其不要跟python里面的变量命名方式混淆了.</li>
<li>JS文件名应该使用小写字符, 以避免在有些系统平台上不识别大小写的命名方式. 文件名以.js结尾, 不要包含除 ‘-‘ 和 ‘<em>‘ 外的标点符号(使用 ‘-‘ 优于 ‘</em>‘), 我们约定统一使用js-file-name.js这种类型，对于template文件命名方式为 template_name.html形式.</li>
<li>所有的html DOM里面的id, Extjs配置项里面的id 以及所有样式里面的 class命名使用中划线，如’id-name’/‘class-name’.</li>
<li>公共的js第三方类库放在static/js/common/lib下，jQuery相关类库放在static/js/common/lib/jQplugin下，我们自己开发的公共类库放在static/js/common下</li>
<li>鉴于有很多代码是复制粘贴过来的，所以大家要保证自己的代码风格良好且易于阅读，不然别人拷过去后不好的风格就蔓延开了，而且会导致其他人效仿。</li>
<li>对于复制粘贴然后做相应修改以实现功能的代码，请务必清理干净，不要有’忘了删除的不影响逻辑的代码’，同时记得将变量名改成适合当前业务场景的有意义的变量名, 不要因为不影响逻辑就保留原来的不适合当前场景的名字</li>
<li>对于系统中出现的大段注释的、过时的、废弃的代码务必及时清理干净，谁制造谁清理，否则其他人也不敢清理，越积越多</li>
<li>不要使用魔法数字，尽量定义一个常量来表示该数字，并加上相应的注释，否则后期可能出现因为数字变化而导致牵一发而动全身，需要到处修改，增加维护成本</li>
<li>注释尽量采用jsdoc的代码注释风格，普通业务代码不做要求，不过通用js类库要求尽量详尽以方便其他人阅读使用</li>
<li>在开发相应功能的时候尽量抽象化、组件化、通用化：考虑这个东西其他地方会不会用到，能不能做成一个组件？而不是类似的代码到处复制、修改或者让大家都去写一遍</li>
<li>类似地，在解决问题的时候要考虑下其他地方会不会存在同样的问题？能不能统一解决掉？尤其对于类似ExtJs的Bug这种，能不能做最少的改动解决所有同样的问题,类似于全局补丁.</li>
<li>代码风格跟其他JS文件的代码风格保持一致</li>
<li>新增、修改、查看等表单在 popup的时候需要重新初始化清除原来数据</li>
<li>代码提交前用JSHint检查一下</li>
</ol>
<a id="more"></a>

<h2 id="前端资源Build">前端资源Build</h2>
<p>项目必须总是提供一些通用的方法来检验（can be linted）、测试和压缩源码以为产品阶段使用做准备。对于此类工作 Ben Alman 所写的 <a href="https://github.com/cowboy/grunt" target="_blank" rel="external">grunt</a> 可谓首屈一指。通过简单的配置即可完成自动对CSS进行检查/压缩/合并，对JS进行检查/压缩/合并，对html文件进行压缩，删除创建目录，拷贝文件，压缩打包等，十分方便。<br>参考的grunt配置文件:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Grunt file for front end resource check/minify/compress.</div><div class="line"> */</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span><span class="params">(grunt)</span> </span>{</div><div class="line"></div><div class="line">  grunt.initConfig({</div><div class="line">    pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</div><div class="line">    jshint: {</div><div class="line">      options: {</div><div class="line">        asi       : <span class="literal">true</span>,</div><div class="line">        curly     : <span class="literal">false</span>,</div><div class="line">        eqeqeq    : <span class="literal">true</span>,</div><div class="line">        immed     : <span class="literal">false</span>,</div><div class="line">        latedef   : <span class="literal">true</span>,</div><div class="line">        newcap    : <span class="literal">true</span>,</div><div class="line">        noarg     : <span class="literal">true</span>,</div><div class="line">        sub       : <span class="literal">true</span>,</div><div class="line">        undef     : <span class="literal">true</span>,</div><div class="line">        boss      : <span class="literal">true</span>,</div><div class="line">        eqnull    : <span class="literal">true</span>,</div><div class="line">        smarttabs : <span class="literal">true</span>,</div><div class="line">        browser   : <span class="literal">true</span>,</div><div class="line">        jquery    : <span class="literal">true</span>,</div><div class="line">        white     : <span class="literal">false</span>,</div><div class="line">        laxbreak  : <span class="literal">false</span>,</div><div class="line">        laxcomma  : <span class="literal">true</span>,</div><div class="line">        expr      : <span class="literal">true</span>,</div><div class="line">        devel     : <span class="literal">false</span>,</div><div class="line">        globals   : {</div><div class="line">          <span class="built_in">module</span>    : <span class="literal">true</span>,</div><div class="line">          Mousetrap : <span class="literal">true</span>,</div><div class="line">          jQuery    : <span class="literal">true</span></div><div class="line">        }</div><div class="line">      },</div><div class="line">      all: [<span class="string">'Gruntfile.js'</span>, <span class="string">'js/**/*.js'</span>, <span class="string">'!js/**/*.min.js'</span>, <span class="string">'!js/json2.js'</span>, <span class="string">'!js/jquery.simplemodal.js'</span>]</div><div class="line">    },</div><div class="line">    clean: {</div><div class="line">      release: {</div><div class="line">        src: [<span class="string">'release/'</span>]</div><div class="line">      }</div><div class="line">    },</div><div class="line">    uglify: {</div><div class="line">      options: {</div><div class="line">        banner: <span class="string">'/*! &lt;%= pkg.description %&gt;  Ver: &lt;%= pkg.version %&gt;  Date: &lt;%= grunt.template.today("yyyy/mm/dd HH:MM:ss") %&gt; */\n'</span></div><div class="line">      },</div><div class="line">      dist: {</div><div class="line">        <span class="comment">// Grunt will search for "**/?.js" under "js/" when the "uglify" task</span></div><div class="line">        <span class="comment">// runs and build the appropriate src-dest file mappings then, so you</span></div><div class="line">        <span class="comment">// don't need to update the Gruntfile when files are added or removed.</span></div><div class="line">        files: [</div><div class="line">          {</div><div class="line">            expand : <span class="literal">true</span>,                                  <span class="comment">// Enable dynamic expansion.</span></div><div class="line">            cwd    : <span class="string">'js/'</span>,                                 <span class="comment">// Src matches are relative to this path.</span></div><div class="line">            src    : [<span class="string">'jquery.simplemodal.js'</span>,<span class="string">'index.js'</span>],  <span class="comment">// Actual pattern(s) to match.</span></div><div class="line">            dest   : <span class="string">'release/js/'</span>                          <span class="comment">// Destination path prefix.</span></div><div class="line">            <span class="comment">// ext : '.js'                                  // Dest filepaths will have this extension. '.min.js' is recommeded.</span></div><div class="line">          }</div><div class="line">        ]</div><div class="line">      }</div><div class="line">    },</div><div class="line">    cssmin: {</div><div class="line">      minify: {</div><div class="line">        expand : <span class="literal">true</span>,</div><div class="line">        cwd    : <span class="string">'style/'</span>,</div><div class="line">        src    : [<span class="string">'*.css'</span>],</div><div class="line">        dest   : <span class="string">'release/style/'</span>,</div><div class="line">        ext    : <span class="string">'.css'</span></div><div class="line">      }</div><div class="line">    },</div><div class="line">    htmlmin: {                                     <span class="comment">// Task</span></div><div class="line">      dist: {                                      <span class="comment">// Target</span></div><div class="line">        options: {                                 <span class="comment">// Target options</span></div><div class="line">          removeComments: <span class="literal">true</span>,</div><div class="line">          collapseWhitespace: <span class="literal">true</span></div><div class="line">        },</div><div class="line">        files: {                                   <span class="comment">// Dictionary of files</span></div><div class="line">          <span class="string">'release/index.html'</span>: <span class="string">'index.html'</span>       <span class="comment">// 'destination': 'source'</span></div><div class="line">        }</div><div class="line">      }</div><div class="line">    },</div><div class="line">    copy: {</div><div class="line">      main: {</div><div class="line">        files: [</div><div class="line">          {expand: <span class="literal">true</span>, cwd: <span class="string">'.'</span>, src: [<span class="string">'js/*.min.js'</span>, <span class="string">'js/json2.js'</span>, <span class="string">'images/*'</span>], dest: <span class="string">'release/'</span>}</div><div class="line">        ]</div><div class="line">      }</div><div class="line">    },</div><div class="line">    compress: {</div><div class="line">      main: {</div><div class="line">        options: {</div><div class="line">          archive: <span class="string">'release/executable.zip'</span>         <span class="comment">// make a zipfile</span></div><div class="line">        },</div><div class="line">        files: [</div><div class="line">          <span class="comment">// {src: ['release/**'], dest: 'release/'},                        // includes files in path and its subdirs</span></div><div class="line">          {expand: <span class="literal">true</span>, cwd: <span class="string">'release/'</span>, src: [<span class="string">'**'</span>], dest: <span class="string">'executable/'</span>}  <span class="comment">// makes all src relative to cwd</span></div><div class="line">        ]</div><div class="line">      }</div><div class="line">    }</div><div class="line"></div><div class="line">  });</div><div class="line"></div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-jshint'</span>);</div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-clean'</span>);</div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-cssmin'</span>);</div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-htmlmin'</span>);</div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-copy'</span>);</div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-compress'</span>);</div><div class="line"></div><div class="line">  grunt.registerTask(<span class="string">'min'</span>    , [<span class="string">'clean'</span>, <span class="string">'uglify'</span>, <span class="string">'cssmin'</span>, <span class="string">'htmlmin'</span>, <span class="string">'copy'</span>, <span class="string">'compress'</span>]);</div><div class="line">  grunt.registerTask(<span class="string">'check'</span>  , [<span class="string">'jshint'</span>]);</div><div class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'jshint'</span>, <span class="string">'clean'</span>, <span class="string">'uglify'</span>, <span class="string">'cssmin'</span>, <span class="string">'htmlmin'</span>, <span class="string">'copy'</span>, <span class="string">'compress'</span>]);</div><div class="line"></div><div class="line">};</div></pre></td></tr></table></figure>

<h2 id="规范详情">规范详情</h2>
<h3 id="JavaScript_编码风格">JavaScript 编码风格</h3>
<h4 id="空白">空白</h4>
<ul>
<li>永远都不要混用空格和Tab。</li>
<li>开始一个项目，在写代码之前，选择软缩进（空格）或者 Tab（作为缩进方式），并将其作为<strong>最高准则</strong>。<ul>
<li>为了可读, 我总是推荐在你的编辑中设计4个字母宽度的缩进 &mdash; 这等同于四个空格或者四个空格替代一个 Tab。</li>
</ul>
</li>
<li>如果你的编辑器支持，请总是打开 “显示不可见字符” 这个设置。好处是：<ul>
<li>保证一致性</li>
<li>去掉行末的空格</li>
<li>去掉空行的空格</li>
<li>提交和对比更具可读性</li>
</ul>
</li>
</ul>
<h4 id="行末和空行">行末和空行</h4>
<p>留白会破坏 diff 并使diff 结果变得更不可读。考虑包括一个预提交的 hook 自动删除行末和空行中的空格。</p>
<h4 id="花括号,_换行">花括号, 换行</h4>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// if/else/for/while/try 通常都有小括号、花括号和多行</span></div><div class="line"><span class="comment">// 这有助于可读, 以下是很糟糕的写法</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(condition) doSomething();</div><div class="line"></div><div class="line"><span class="keyword">while</span>(condition) iterating++;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) someIterativeFn();</div></pre></td></tr></table></figure>

<h4 id="命名">命名</h4>
<p>通常, 使用 functionNamesLikeThis, variableNamesLikeThis, ClassNamesLikeThis, EnumNamesLikeThis, methodNamesLikeThis, 和 SYMBOLIC_CONSTANTS_LIKE_THIS.</p>
<h5 id="属性和方法">属性和方法</h5>
<p>文件或类中的 私有 属性, 变量和方法名应该以下划线 “_” 开头.<br>保护 属性, 变量和方法名不需要下划线开头, 和公共变量名一样.</p>
<h5 id="方法和函数参数">方法和函数参数</h5>
<p>可选参数以 opt_ 开头.</p>
<p>函数的参数个数不固定时, 应该添加最后一个参数 var_args 为参数的个数. 你也可以不设置 var_args而取代使用 arguments.</p>
<p>可选和可变参数应该在 @param 标记中说明清楚. 虽然这两个规定对编译器没有任何影响, 但还是请尽量遵守</p>
<h5 id="Getters_和_Setters">Getters 和 Setters</h5>
<p>Getters 和 setters 并不是必要的. 但只要使用它们了, 就请将 getters 命名成 getFoo() 形式, 将 setters 命名成 setFoo(value) 形式. (对于布尔类型的 getters, 使用 isFoo() 也可.)</p>
<h4 id="命名空间">命名空间</h4>
<p>JavaScript 不支持包和命名空间.<br>不容易发现和调试全局命名的冲突, 多个系统集成时还可能因为命名冲突导致很严重的问题. 为了提高 JavaScript 代码复用率, 我们遵循下面的约定以避免冲突.</p>
<h5 id="为全局代码使用命名空间">为全局代码使用命名空间</h5>
<p>在全局作用域上, 使用一个唯一的, 与工程/库相关的名字作为前缀标识. 比如, 你的工程是 “Project Sloth”, 那么命名空间前缀可取为 sloth.*.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sloth = {};</div><div class="line"></div><div class="line">sloth.sleep = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  ...</div><div class="line">};</div></pre></td></tr></table></figure>

<p>许多 JavaScript 库, 包括 the Closure Library and Dojo toolkit 为你提供了声明你自己的命名空间的函数. 比如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">goog.provide(<span class="string">'sloth'</span>);</div><div class="line"></div><div class="line">sloth.sleep = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  ...</div><div class="line">};</div></pre></td></tr></table></figure>

<h5 id="明确命名空间所有权">明确命名空间所有权</h5>
<p>当选择了一个子命名空间, 请确保父命名空间的负责人知道你在用哪个子命名空间, 比如说, 你为工程 ‘sloths’ 创建一个 ‘hats’ 子命名空间, 那确保 Sloth 团队人员知道你在使用 sloth.hats.</p>
<h5 id="外部代码和内部代码使用不同的命名空间">外部代码和内部代码使用不同的命名空间</h5>
<p>“外部代码” 是指来自于你代码体系的外部, 可以独立编译. 内外部命名应该严格保持独立. 如果你使用了外部库, 他的所有对象都在 foo.hats.<em> 下, 那么你自己的代码不能在 foo.hats.</em>下命名, 因为很有可能其他团队也在其中命名.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">foo.require(<span class="string">'foo.hats'</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * WRONG -- Do NOT do this.</div><div class="line"> * @constructor</div><div class="line"> * @extend {foo.hats.RoundHat}</div><div class="line"> */</div><div class="line">foo.hats.BowlerHat = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">};</div></pre></td></tr></table></figure>

<h4 id="重命名那些名字很长的变量,_提高可读性">重命名那些名字很长的变量, 提高可读性</h4>
<p>主要是为了提高可读性. 局部空间中的变量别名只需要取原名字的最后部分.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @constructor</div><div class="line"> */</div><div class="line">some.long.namespace.MyClass = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @param {some.long.namespace.MyClass} a</div><div class="line"> */</div><div class="line">some.long.namespace.MyClass.staticHelper = <span class="function"><span class="keyword">function</span><span class="params">(a)</span> </span>{</div><div class="line">  ...</div><div class="line">};</div><div class="line"></div><div class="line">myapp.main = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> MyClass = some.long.namespace.MyClass;</div><div class="line">  <span class="keyword">var</span> staticHelper = some.long.namespace.MyClass.staticHelper;</div><div class="line">  staticHelper(<span class="keyword">new</span> MyClass());</div><div class="line">};</div></pre></td></tr></table></figure>

<h4 id="除非是枚举类型,_不然不要访问别名变量的属性-">除非是枚举类型, 不然不要访问别名变量的属性.</h4>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** @enum {string} */</span></div><div class="line">some.long.namespace.Fruit = {</div><div class="line">  APPLE: <span class="string">'a'</span>,</div><div class="line">  BANANA: <span class="string">'b'</span></div><div class="line">};</div><div class="line"></div><div class="line">myapp.main = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> Fruit = some.long.namespace.Fruit;</div><div class="line">  <span class="keyword">switch</span> (fruit) {</div><div class="line">    <span class="keyword">case</span> Fruit.APPLE:</div><div class="line">      ...</div><div class="line">    <span class="keyword">case</span> Fruit.BANANA:</div><div class="line">      ...</div><div class="line">  }</div><div class="line">};</div><div class="line">myapp.main = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> MyClass = some.long.namespace.MyClass;</div><div class="line">  MyClass.staticHelper(<span class="literal">null</span>);</div><div class="line">};</div></pre></td></tr></table></figure>

<p>不要在全局范围内创建别名, 而仅在函数块作用域中使用.</p>
<h4 id="文件名">文件名</h4>
<p>文件名应该使用小写字符, 以避免在有些系统平台上不识别大小写的命名方式. 文件名以.js结尾, 不要包含除 - 和 <em> 外的标点符号(使用 - 优于 </em>).</p>
<h4 id="自定义_toString()_方法">自定义 toString() 方法</h4>
<p>应该总是成功调用且不要抛异常.<br>可自定义 toString() 方法, 但确保你的实现方法满足: (1) 总是成功 (2) 没有其他负面影响. 如果不满足这两个条件, 那么可能会导致严重的问题, 比如, 如果 toString() 调用了包含 assert 的函数, assert 输出导致失败的对象, 这在 toString() 也会被调用.</p>
<h4 id="延迟初始化">延迟初始化</h4>
<p>可以<br>没必要在每次声明变量时就将其初始化.</p>
<h4 id="明确作用域">明确作用域</h4>
<p>任何时候都需要<br>任何时候都要明确作用域 - 提高可移植性和清晰度. 例如, 不要依赖于作用域链中的 window 对象. 可能在其他应用中, 你函数中的 window 不是指之前的那个窗口对象.</p>
<h4 id="代码格式化">代码格式化</h4>
<h5 id="大括号">大括号</h5>
<p>分号会被隐式插入到代码中, 所以你务必在同一行上插入大括号. 例如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (something) {</div><div class="line">  <span class="comment">// ...</span></div><div class="line">} <span class="keyword">else</span> {</div><div class="line">  <span class="comment">// ...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h5 id="数组和对象的初始化">数组和对象的初始化</h5>
<p>如果初始值不是很长, 就保持写在单行上:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];  <span class="comment">// No space after [ or before ].</span></div><div class="line"><span class="keyword">var</span> obj = {a: <span class="number">1</span>, b: <span class="number">2</span>, c: <span class="number">3</span>};  <span class="comment">// No space after { or before }.</span></div></pre></td></tr></table></figure>

<p>初始值占用多行时, 缩进2个空格.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Object initializer.</span></div><div class="line"><span class="keyword">var</span> inset = {</div><div class="line">  top: <span class="number">10</span>,</div><div class="line">  right: <span class="number">20</span>,</div><div class="line">  bottom: <span class="number">15</span>,</div><div class="line">  left: <span class="number">12</span></div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">// Array initializer.</span></div><div class="line"><span class="keyword">this</span>.rows_ = [</div><div class="line">  <span class="string">'"Slartibartfast" &lt;fjordmaster@magrathea.com&gt;'</span>,</div><div class="line">  <span class="string">'"Zaphod Beeblebrox" &lt;theprez@universe.gov&gt;'</span>,</div><div class="line">  <span class="string">'"Ford Prefect" &lt;ford@theguide.com&gt;'</span>,</div><div class="line">  <span class="string">'"Arthur Dent" &lt;has.no.tea@gmail.com&gt;'</span>,</div><div class="line">  <span class="string">'"Marvin the Paranoid Android" &lt;marv@googlemail.com&gt;'</span>,</div><div class="line">  <span class="string">'the.mice@magrathea.com'</span></div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// Used in a method call.</span></div><div class="line">goog.dom.createDom(goog.dom.TagName.DIV, {</div><div class="line">  id: <span class="string">'foo'</span>,</div><div class="line">  className: <span class="string">'some-css-class'</span>,</div><div class="line">  style: <span class="string">'display:none'</span></div><div class="line">}, <span class="string">'Hello, world!'</span>);</div></pre></td></tr></table></figure>

<h5 id="函数参数">函数参数</h5>
<p>尽量让函数参数在同一行上. 如果一行超过 80 字符, 每个参数独占一行, 并以4个空格缩进, 或者与括号对齐, 以提高可读性. 尽可能不要让每行超过80个字符. 比如下面这样:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Four-space, wrap at 80.  Works with very long function names, survives</span></div><div class="line"><span class="comment">// renaming without reindenting, low on space.</span></div><div class="line">goog.foo.bar.doThingThatIsVeryDifficultToExplain = <span class="function"><span class="keyword">function</span><span class="params">(</span></span></div><div class="line">    veryDescriptiveArgumentNumberOne, veryDescriptiveArgumentTwo,</div><div class="line">    tableModelEventHandlerProxy, artichokeDescriptorAdapterIterator) {</div><div class="line">  <span class="comment">// ...</span></div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">// Four-space, one argument per line.  Works with long function names,</span></div><div class="line"><span class="comment">// survives renaming, and emphasizes each argument.</span></div><div class="line">goog.foo.bar.doThingThatIsVeryDifficultToExplain = <span class="function"><span class="keyword">function</span><span class="params">(</span></span></div><div class="line">    veryDescriptiveArgumentNumberOne,</div><div class="line">    veryDescriptiveArgumentTwo,</div><div class="line">    tableModelEventHandlerProxy,</div><div class="line">    artichokeDescriptorAdapterIterator) {</div><div class="line">  <span class="comment">// ...</span></div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">// Parenthesis-aligned indentation, wrap at 80.  Visually groups arguments,</span></div><div class="line"><span class="comment">// low on space.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(veryDescriptiveArgumentNumberOne, veryDescriptiveArgumentTwo,</span></span></div><div class="line">             tableModelEventHandlerProxy, artichokeDescriptorAdapterIterator) {</div><div class="line">  <span class="comment">// ...</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// Parenthesis-aligned, one argument per line.  Visually groups and</span></div><div class="line"><span class="comment">// emphasizes each individual argument.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">(veryDescriptiveArgumentNumberOne,</span></span></div><div class="line">             veryDescriptiveArgumentTwo,</div><div class="line">             tableModelEventHandlerProxy,</div><div class="line">             artichokeDescriptorAdapterIterator) {</div><div class="line">  <span class="comment">// ...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h5 id="传递匿名函数">传递匿名函数</h5>
<p>如果参数中有匿名函数, 函数体从调用该函数的左边开始缩进2个空格, 而不是从 function 这个关键字开始. 这让匿名函数更加易读 (不要增加很多没必要的缩进让函数体显示在屏幕的右侧).</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> names = items.map(<span class="function"><span class="keyword">function</span><span class="params">(item)</span> </span>{</div><div class="line">                        <span class="keyword">return</span> item.name;</div><div class="line">                      });</div><div class="line"></div><div class="line">prefix.something.reallyLongFunctionName(<span class="string">'whatever'</span>, <span class="function"><span class="keyword">function</span><span class="params">(a1, a2)</span> </span>{</div><div class="line">  <span class="keyword">if</span> (a1.equals(a2)) {</div><div class="line">    someOtherLongFunctionName(a1);</div><div class="line">  } <span class="keyword">else</span> {</div><div class="line">    andNowForSomethingCompletelyDifferent(a2.parrot);</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<h5 id="更多的缩进">更多的缩进</h5>
<p>事实上, 除了 初始化数组和对象 , 和传递匿名函数外, 所有被拆开的多行文本要么选择与之前的表达式左对齐, 要么以4个(而不是2个)空格作为一缩进层次.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">someWonderfulHtml = <span class="string">''</span> +</div><div class="line">                    getEvenMoreHtml(someReallyInterestingValues, moreValues,</div><div class="line">                                    evenMoreParams, <span class="string">'a duck'</span>, <span class="literal">true</span>, <span class="number">72</span>,</div><div class="line">                                    slightlyMoreMonkeys(<span class="number">0xfff</span>)) +</div><div class="line">                    <span class="string">''</span>;</div><div class="line"></div><div class="line">thisIsAVeryLongVariableName =</div><div class="line">    hereIsAnEvenLongerOtherFunctionNameThatWillNotFitOnPrevLine();</div><div class="line"></div><div class="line">thisIsAVeryLongVariableName = <span class="string">'expressionPartOne'</span> + someMethodThatIsLong() +</div><div class="line">    thisIsAnEvenLongerOtherFunctionNameThatCannotBeIndentedMore();</div><div class="line"></div><div class="line">someValue = <span class="keyword">this</span>.foo(</div><div class="line">    shortArg,</div><div class="line">    <span class="string">'Some really long string arg - this is a pretty common case, actually.'</span>,</div><div class="line">    shorty2,</div><div class="line">    <span class="keyword">this</span>.bar());</div><div class="line"></div><div class="line"><span class="keyword">if</span> (searchableCollection(allYourStuff).contains(theStuffYouWant) &&</div><div class="line">    !ambientNotification.isActive() && (client.isAmbientSupported() ||</div><div class="line">                                        client.alwaysTryAmbientAnyways()) {</div><div class="line">  ambientNotification.activate();</div><div class="line">}</div></pre></td></tr></table></figure>

<h5 id="空行">空行</h5>
<p>使用空行来划分一组逻辑上相关联的代码片段.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">doSomethingTo(x);</div><div class="line">doSomethingElseTo(x);</div><div class="line">andThen(x);</div><div class="line"></div><div class="line">nowDoSomethingWith(y);</div><div class="line"></div><div class="line">andNowWith(z);</div></pre></td></tr></table></figure>

<h5 id="二元和三元操作符">二元和三元操作符</h5>
<p>操作符始终跟随着前行, 这样就不用顾虑分号的隐式插入问题. 如果一行实在放不下, 还是按照上述的缩进风格来换行.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = a ? b : c;  <span class="comment">// All on one line if it will fit.</span></div><div class="line"></div><div class="line"><span class="comment">// Indentation +4 is OK.</span></div><div class="line"><span class="keyword">var</span> y = a ?</div><div class="line">    longButSimpleOperandB : longButSimpleOperandC;</div><div class="line"></div><div class="line"><span class="comment">// Indenting to the line position of the first operand is also OK.</span></div><div class="line"><span class="keyword">var</span> z = a ?</div><div class="line">        moreComplicatedB :</div><div class="line">        moreComplicatedC;</div></pre></td></tr></table></figure>

<h5 id="括号">括号</h5>
<p>只在需要的时候使用<br>不要滥用括号, 只在必要的时候使用它.</p>
<p>对于一元操作符(如delete, typeof 和 void ), 或是在某些关键词(如 return, throw, case, new )之后, 不要使用括号.</p>
<h5 id="字符串">字符串</h5>
<p>使用 ‘ 优于 “<br>无论你选择单引号还是双引号都无所谓，在 JavaScript 中它们在解析上没有区别。而<strong>绝对需要</strong>强制的是一致性。 <strong>永远不要在同一个项目中混用两种引号，选择一种，并保持一致</strong>。</p>
<p>单引号 (‘) 优于双引号 (“). 当你创建一个包含 HTML 代码的字符串时就知道它的好处了.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> msg = <span class="string">'This is some HTML'</span>;</div></pre></td></tr></table></figure>

<h5 id="前置逗号（Comma_First）">前置逗号（Comma First）</h5>
<p>请勿使用。所有使用这个文档作为基本风格指南的项目都不允许前置逗号的代码格式，除非明确指定或者作者要求。</p>
<h5 id="注释">注释</h5>
<ul>
<li>单行注释放于代码上方为首选</li>
<li>多行也可以</li>
<li>行末注释应被避免!</li>
<li>JSDoc 的方式也不错，但需要比较多的时间</li>
</ul>
<h5 id="使用_JSDoc">使用 JSDoc</h5>
<p>我们使用 JSDoc 中的注释风格. 行内注释使用 // 变量 的形式. 另外, 我们也遵循 C++ 代码注释风格 . 这也就是说你需要:</p>
<ul>
<li>版权和著作权的信息,</li>
<li>文件注释中应该写明该文件的基本信息(如, 这段代码的功能摘要, 如何使用, 与哪些东西相关), 来告诉那些不熟悉代码的读者.</li>
<li>类, 函数, 变量和必要的注释,</li>
<li>期望在哪些浏览器中执行,</li>
<li>正确的大小写, 标点和拼写.</li>
<li>为了避免出现句子片段, 请以合适的大/小写单词开头, 并以合适的标点符号结束这个句子.</li>
</ul>
<p>现在假设维护这段代码的是一位初学者. 这可能正好是这样的!</p>
<p>目前很多编译器可从 JSDoc 中提取类型信息, 来对代码进行验证, 删除和压缩. 因此, 你很有必要去熟悉正确完整的 JSDoc .</p>
<h5 id="顶层/文件注释">顶层/文件注释</h5>
<p>顶层注释用于告诉不熟悉这段代码的读者这个文件中包含哪些东西. 应该提供文件的大体内容, 它的作者, 依赖关系和兼容性信息. 如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Copyright 2009 Google Inc. All Rights Reserved.</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @fileoverview Description of file, its uses and information</div><div class="line"> * about its dependencies.</div><div class="line"> * @author user@google.com (Firstname Lastname)</div><div class="line"> */</div></pre></td></tr></table></figure>

<h5 id="类注释">类注释</h5>
<p>每个类的定义都要附带一份注释, 描述类的功能和用法. 也需要说明构造器参数. 如果该类继承自其它类, 应该使用 @extends 标记. 如果该类是对接口的实现, 应该使用 @implements 标记.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Class making something fun and easy.</div><div class="line"> * @param {string} arg1 An argument that makes this more interesting.</div><div class="line"> * @param {Array.&lt;number&gt;} arg2 List of numbers to be processed.</div><div class="line"> * @constructor</div><div class="line"> * @extends {goog.Disposable}</div><div class="line"> */</div><div class="line">project.MyClass = <span class="function"><span class="keyword">function</span><span class="params">(arg1, arg2)</span> </span>{</div><div class="line">  <span class="comment">// ...</span></div><div class="line">};</div><div class="line">goog.inherits(project.MyClass, goog.Disposable);</div></pre></td></tr></table></figure>

<h5 id="方法与函数的注释">方法与函数的注释</h5>
<p>提供参数的说明. 使用完整的句子, 并用第三人称来书写方法说明.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Converts text to some completely different text.</div><div class="line"> * @param {string} arg1 An argument that makes this more interesting.</div><div class="line"> * @return {string} Some return value.</div><div class="line"> */</div><div class="line">project.MyClass.prototype.someMethod = <span class="function"><span class="keyword">function</span><span class="params">(arg1)</span> </span>{</div><div class="line">  <span class="comment">// ...</span></div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Operates on an instance of MyClass and returns something.</div><div class="line"> * @param {project.MyClass} obj Instance of MyClass which leads to a long</div><div class="line"> *     comment that needs to be wrapped to two lines.</div><div class="line"> * @return {boolean} Whether something occured.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PR_someMethod</span><span class="params">(obj)</span> </span>{</div><div class="line">  <span class="comment">// ...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>对于一些简单的, 不带参数的 getters, 说明可以忽略.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @return {Element} The element for the component.</div><div class="line"> */</div><div class="line">goog.ui.Component.prototype.getElement = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.element_;</div><div class="line">};</div></pre></td></tr></table></figure>

<h5 id="属性注释">属性注释</h5>
<p>也需要对属性进行注释.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Maximum number of things per pane.</div><div class="line"> * @type {number}</div><div class="line"> */</div><div class="line">project.MyClass.prototype.someProperty = <span class="number">4</span>;</div></pre></td></tr></table></figure>

<h5 id="JSDoc_缩进">JSDoc 缩进</h5>
<p>如果你在 @param, @return, @supported, @this 或 @deprecated 中断行, 需要像在代码中一样, 使用4个空格作为一个缩进层次.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Illustrates line wrapping for long param/return descriptions.</div><div class="line"> * @param {string} foo This is a param with a description too long to fit in</div><div class="line"> *     one line.</div><div class="line"> * @return {number} This returns something that has a description too long to</div><div class="line"> *     fit in one line.</div><div class="line"> */</div><div class="line">project.MyClass.prototype.method = <span class="function"><span class="keyword">function</span><span class="params">(foo)</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">};</div></pre></td></tr></table></figure>

<p>不要在 @fileoverview 标记中进行缩进.</p>
<p>虽然不建议, 但也可对说明文字进行适当的排版对齐. 不过, 这样带来一些负面影响, 就是当你每次修改变量名时, 都得重新排版说明文字以保持和变量名对齐.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * This is NOT the preferred indentation method.</div><div class="line"> * @param {string} foo This is a param with a description too long to fit in</div><div class="line"> *                     one line.</div><div class="line"> * @return {number} This returns something that has a description too long to</div><div class="line"> *                  fit in one line.</div><div class="line"> */</div><div class="line">project.MyClass.prototype.method = <span class="function"><span class="keyword">function</span><span class="params">(foo)</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">};</div></pre></td></tr></table></figure>

<h5 id="枚举">枚举</h5>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Enum for tri-state values.</div><div class="line"> * @enum {number}</div><div class="line"> */</div><div class="line">project.TriState = {</div><div class="line">  TRUE: <span class="number">1</span>,</div><div class="line">  FALSE: -<span class="number">1</span>,</div><div class="line">  MAYBE: <span class="number">0</span></div><div class="line">};</div></pre></td></tr></table></figure>

<p>注意一下, 枚举也具有有效类型, 所以可以当成参数类型来用.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Sets project state.</div><div class="line"> * @param {project.TriState} state New project state.</div><div class="line"> */</div><div class="line">project.setState = <span class="function"><span class="keyword">function</span><span class="params">(state)</span> </span>{</div><div class="line">  <span class="comment">// ...</span></div><div class="line">};</div></pre></td></tr></table></figure>

<h3 id="JavaScript_语言规范">JavaScript 语言规范</h3>
<h4 id="变量">变量</h4>
<p>声明变量必须加上 var 关键字.<br>当你没有写 var, 变量就会暴露在全局上下文中, 这样很可能会和现有变量冲突. 另外, 如果没有加上, 很难明确该变量的作用域是什么, 变量也很可能像在局部作用域中, 很轻易地泄漏到 Document 或者 Window 中, 所以务必用 var 去声明变量.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 变量</span></div><div class="line"><span class="keyword">var</span> foo = <span class="string">"bar"</span>,</div><div class="line">  num = <span class="number">1</span>,</div><div class="line">  undef;</div><div class="line"></div><div class="line"><span class="comment">// 字面量标识:</span></div><div class="line"><span class="keyword">var</span> array = [],</div><div class="line">  object = {};</div><div class="line"></div><div class="line"><span class="comment">// 在一个作用域（函数）内只使用一个 `var` 有助于提升可读性</span></div><div class="line"><span class="comment">// 并且让你的声明列表变得有条不紊 (还帮你省了几次键盘敲击)</span></div><div class="line"></div><div class="line"><span class="comment">// 不好</span></div><div class="line"><span class="keyword">var</span> foo = <span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> bar = <span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> qux;</div><div class="line"></div><div class="line"><span class="comment">// 好的做法</span></div><div class="line"><span class="keyword">var</span> foo = <span class="string">""</span>,</div><div class="line">  bar = <span class="string">""</span>,</div><div class="line">  quux;</div><div class="line"></div><div class="line"><span class="comment">// 或者..</span></div><div class="line"><span class="keyword">var</span> <span class="comment">// 对这些变量的注释</span></div><div class="line">foo = <span class="string">""</span>,</div><div class="line">bar = <span class="string">""</span>,</div><div class="line">quux;</div><div class="line"></div><div class="line"><span class="comment">// `var` 语句必须总是在各自作用域（函数）顶部</span></div><div class="line"><span class="comment">// 同样适应于来自 ECMAScript 6 的常量</span></div><div class="line"></div><div class="line"><span class="comment">// 不好</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>{</div><div class="line"></div><div class="line">  <span class="comment">// 在变量前有语句</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> bar = <span class="string">""</span>,</div><div class="line">    qux;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// 好</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> bar = <span class="string">""</span>,</div><div class="line">    qux;</div><div class="line"></div><div class="line">  <span class="comment">// 所有语句都在变量之后</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="常量">常量</h4>
<p>常量的形式如: NAMES_LIKE_THIS, 即使用大写字符, 并用下划线分隔. 你也可用 @const 标记来指明它是一个常量. 但请永远不要使用 const 关键词.</p>
<p>Decision:<br>对于基本类型的常量, 只需转换命名.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The number of seconds in a minute.</div><div class="line"> * @type {number}</div><div class="line"> */</div><div class="line">goog.example.SECONDS_IN_A_MINUTE = <span class="number">60</span>;</div></pre></td></tr></table></figure>

<p>对于非基本类型, 使用 @const 标记.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The number of seconds in each of the given units.</div><div class="line"> * @type {Object.&lt;number&gt;}</div><div class="line"> * @const</div><div class="line"> */</div><div class="line">goog.example.SECONDS_TABLE = {</div><div class="line">  minute: <span class="number">60</span>,</div><div class="line">  hour: <span class="number">60</span> * <span class="number">60</span>,</div><div class="line">  day: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>这标记告诉编译器它是常量.</p>
<p>至于关键词 const, 因为 IE 不能识别, 所以不要使用.</p>
<h4 id="分号">分号</h4>
<p>总是使用分号.</p>
<p>如果仅依靠语句间的隐式分隔, 有时会很麻烦. 你自己更能清楚哪里是语句的起止. 而且有些情况下, 漏掉分号会很危险，可能会导致代码合并错误等，又比如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 1.</span></div><div class="line">MyClass.prototype.myMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="number">42</span>;</div><div class="line">}  <span class="comment">// No semicolon here.</span></div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// Some initialization code wrapped in a function to create a scope for locals.</span></div><div class="line">})();</div><div class="line"></div><div class="line"><span class="keyword">var</span> THINGS_TO_EAT = [apples, oysters, sprayOnCheese]  <span class="comment">// No semicolon here.</span></div><div class="line"></div><div class="line"><span class="comment">// 2. conditional execution a la bash</span></div><div class="line">-<span class="number">1</span> == resultOfOperation() || die();</div></pre></td></tr></table></figure>

<p>这段代码会发生些什么诡异事呢?</p>
<ol>
<li>报 JavaScript 错误 - 例子1上的语句会解释成, 一个函数带一匿名函数作为参数而被调用, 返回42后, 又一次被”调用”, 这就导致了错误.</li>
<li>当 resultOfOperation() 返回非 NaN 时, 就会调用die, 其结果也会赋给 THINGS_TO_EAT.<br>为什么?</li>
</ol>
<p>JavaScript 的语句以分号作为结束符, 除非可以非常准确推断某结束位置才会省略分号. 上面的例子产出错误, 均是在语句中声明了函数/对象/数组直接量, 但 闭括号(‘}’或’]’)并不足以表示该语句的结束. 在 JavaScript 中, 只有当语句后的下一个符号是后缀或括号运算符时, 才会认为该语句的结束. 参考：<a href="http://justjavac.iteye.com/blog/1852405" target="_blank" rel="external">JS分号自动插入机制</a></p>
<p>遗漏分号有时会出现很奇怪的结果, 所以确保语句以分号结束.</p>
<h4 id="块内函数声明">块内函数声明</h4>
<p>不要在块内声明一个函数，不要写成:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (x) {</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>{}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>虽然很多 JS 引擎都支持块内声明函数, 但它不属于 ECMAScript 规范 (见 <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" target="_blank" rel="external">ECMA-262</a>, 第13和14条). 各个浏览器糟糕的实现相互不兼容, 有些也与未来 ECMAScript 草案相违背. ECMAScript 只允许在脚本的根语句或函数中声明函数. 如果确实需要在块中定义函数, 建议使用函数表达式来初始化变量:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (x) {</div><div class="line">  <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}</div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="标准特性">标准特性</h4>
<p>标准特性总是优于非标准特性.<br>最大化可移植性和兼容性, 尽量使用标准方法而不是用非标准方法, (比如, 优先用string.charAt(3) 而不用 string[3] , 通过 DOM 原生函数访问元素, 而不是使用应用封装好的快速接口.</p>
<h4 id="不要封装基本类型">不要封装基本类型</h4>
<p>没有任何理由去封装基本类型, 另外还存在一些风险:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</div><div class="line"><span class="keyword">if</span> (x) {</div><div class="line">  alert(<span class="string">'hi'</span>);  <span class="comment">// Shows 'hi'.</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>除非明确用于类型转换, 其他情况请千万不要这样做！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="built_in">Boolean</span>(<span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (x) {</div><div class="line">  alert(<span class="string">'hi'</span>);  <span class="comment">// This will never be alerted.</span></div><div class="line">}</div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Boolean</span>(<span class="number">0</span>) == <span class="string">'boolean'</span>;</div><div class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">0</span>) == <span class="string">'object'</span>;</div></pre></td></tr></table></figure>

<p>有时用作 number, string 或 boolean时, 类型的转换会非常实用.</p>
<h4 id="闭包">闭包</h4>
<p>可以, 但小心使用.<br>闭包也许是 JS 中最有用的特性了. 有一份比较好的介绍闭包原理的<a href="http://jibbering.com/faq/notes/closures/" target="_blank" rel="external">文档</a>.</p>
<p>有一点需要牢记, 闭包保留了一个指向它封闭作用域的指针, 所以, 在给 DOM 元素附加闭包时, 很可能会产生循环引用, 进一步导致内存泄漏. 比如下面的代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(element, a, b)</span> </span>{</div><div class="line">  element.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="comment">/* uses a and b */</span> };</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这里, 即使没有使用 element, 闭包也保留了 element, a 和 b 的引用, 由于 element 也保留了对闭包的引用, 这就产生了循环引用, 这就不能被 GC 回收. 这种情况下, 可将代码重构为:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(element, a, b)</span> </span>{</div><div class="line">  element.onclick = bar(a, b);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">(a, b)</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="comment">/* uses a and b */</span> }</div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="eval()">eval()</h4>
<p>只用于解析序列化串 (如: 解析 RPC 响应), 而且解析序列号字符串用JSON.parse()会更好，所以最好放弃使用 eval().<br>eval() 会让程序执行的比较混乱, 当 eval() 里面包含用户输入的话就更加危险. 可以用其他更佳的, 更清晰, 更安全的方式写你的代码, 所以一般情况下请不要使用 eval(). 当碰到一些需要解析序列化串的情况下(如, 计算 RPC 响应), 使用 eval 很容易实现.</p>
<p>解析序列化串是指将字节流转换成内存中的数据结构. 比如, 你可能会将一个对象输出成文件形式:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">users = [</div><div class="line">  {</div><div class="line">    name: <span class="string">'Eric'</span>,</div><div class="line">    id: <span class="number">37824</span>,</div><div class="line">    email: <span class="string">'jellyvore@myway.com'</span></div><div class="line">  },</div><div class="line">  {</div><div class="line">    name: <span class="string">'xtof'</span>,</div><div class="line">    id: <span class="number">31337</span>,</div><div class="line">    email: <span class="string">'b4d455h4x0r@google.com'</span></div><div class="line">  },</div><div class="line">  ...</div><div class="line">];</div></pre></td></tr></table></figure>

<p>很简单地调用 eval 后, 把表示成文件的数据读取回内存中.</p>
<p>类似的, eval() 对 RPC 响应值进行解码. 例如, 你在使用 XMLHttpRequest 发出一个 RPC 请求后, 通过 eval () 将服务端的响应文本转成 JavaScript 对象:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> userOnline = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> user = <span class="string">'nusrat'</span>;</div><div class="line"><span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xmlhttp.open(<span class="string">'GET'</span>, <span class="string">'http://chat.google.com/isUserOnline?user='</span> + user, <span class="literal">false</span>);</div><div class="line">xmlhttp.send(<span class="string">''</span>);</div><div class="line"><span class="comment">// Server returns:</span></div><div class="line"><span class="comment">// userOnline = true;</span></div><div class="line"><span class="keyword">if</span> (xmlhttp.status == <span class="number">200</span>) {</div><div class="line">  <span class="built_in">eval</span>(xmlhttp.responseText);</div><div class="line">}</div><div class="line"><span class="comment">// userOnline is now true.</span></div></pre></td></tr></table></figure>

<h4 id="with()_{}">with() {}</h4>
<p>不要使用<br>使用 with 让你的代码在语义上变得不清晰. 因为 with 的对象, 可能会与局部变量产生冲突, 从而改变你程序原本的用义. 下面的代码是干嘛的?</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> (foo) {</div><div class="line">  <span class="keyword">var</span> x = <span class="number">3</span>;</div><div class="line">  <span class="keyword">return</span> x;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>答案: 任何事. 局部变量 x 可能被 foo 的属性覆盖, 当它定义一个 setter 时, 在赋值 3 后会执行很多其他代码. 所以不要使用 with 语句.</p>
<h4 id="this">this</h4>
<p>仅在对象构造器, 方法, 闭包中使用.<br>this 的语义很特别. 有时它引用一个全局对象(大多数情况下), 调用者的作用域(使用 eval时), DOM 树中的节点(添加事件处理函数时), 新创建的对象(使用一个构造器), 或者其他对象(如果函数被 call() 或 apply()).</p>
<p>使用时很容易出错, 所以只有在下面两个情况时才能使用:</p>
<ul>
<li>在构造器中</li>
<li>对象的方法(包括创建的闭包)中</li>
</ul>
<h4 id="for-in_循环">for-in 循环</h4>
<p>只用于 object/map/hash 的遍历<br>对 Array 用 for-in 循环有时会出错. 因为它并不是从 0 到 length - 1 进行遍历, 而是所有出现在对象及其原型链的键值. 下面就是一些失败的使用案例:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printArray</span><span class="params">(arr)</span> </span>{</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> arr) {</div><div class="line">    print(arr[key]);</div><div class="line">  }</div><div class="line">}</div><div class="line"></div><div class="line">printArray([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);  <span class="comment">// This works.</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</div><div class="line">printArray(a);  <span class="comment">// This is wrong.</span></div><div class="line"></div><div class="line">a = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>);</div><div class="line">printArray(a);  <span class="comment">// This is wrong.</span></div><div class="line"></div><div class="line">a = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">a.buhu = <span class="string">'wine'</span>;</div><div class="line">printArray(a);  <span class="comment">// This is wrong again.</span></div><div class="line"></div><div class="line">a = <span class="keyword">new</span> <span class="built_in">Array</span>;</div><div class="line">a[<span class="number">3</span>] = <span class="number">3</span>;</div><div class="line">printArray(a);  <span class="comment">// This is wrong again.</span></div><div class="line"></div><div class="line"><span class="comment">// 而遍历数组通常用最普通的 for 循环.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printArray</span><span class="params">(arr)</span> </span>{</div><div class="line">  <span class="keyword">var</span> l = arr.length;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; l; i++) {</div><div class="line">    print(arr[i]);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="多行字符串">多行字符串</h4>
<p>不要使用. 不要这样写长字符串:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myString = <span class="string">'A rather long string of English text, an error message \</span></div><div class="line">                actually that just keeps going and going -- an error \</div><div class="line">                message to make the Energizer bunny blush (right through \</div><div class="line">                those Schwarzenegger shades)! Where was I? Oh yes, \</div><div class="line">                you\'ve got an error and all the extraneous whitespace is \</div><div class="line">                just gravy.  Have a nice day.';</div></pre></td></tr></table></figure>

<p>在编译时, 不能忽略行起始位置的空白字符; “\” 后的空白字符会产生奇怪的错误; 虽然大多数脚本引擎支持这种写法, 但它不是 ECMAScript 的标准规范.</p>
<h4 id="Array_和_Object_直接量">Array 和 Object 直接量</h4>
<p>使用 Array 和 Object 语法, 而不使用 Array 和 Object 构造器.</p>
<p>使用 Array 构造器很容易因为传参不恰当导致错误.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Length is 3.</span></div><div class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> <span class="built_in">Array</span>(x1, x2, x3);</div><div class="line"></div><div class="line"><span class="comment">// Length is 2.</span></div><div class="line"><span class="keyword">var</span> a2 = <span class="keyword">new</span> <span class="built_in">Array</span>(x1, x2);</div><div class="line"></div><div class="line"><span class="comment">// If x1 is a number and it is a natural number the length will be x1.</span></div><div class="line"><span class="comment">// If x1 is a number but not a natural number this will throw an exception.</span></div><div class="line"><span class="comment">// Otherwise the array will have one element with x1 as its value.</span></div><div class="line"><span class="keyword">var</span> a3 = <span class="keyword">new</span> <span class="built_in">Array</span>(x1);</div><div class="line"></div><div class="line"><span class="comment">// Length is 0.</span></div><div class="line"><span class="keyword">var</span> a4 = <span class="keyword">new</span> <span class="built_in">Array</span>();</div></pre></td></tr></table></figure>

<p>如果传入一个参数而不是2个参数, 数组的长度很有可能就不是你期望的数值了.</p>
<p>为了避免这些歧义, 我们应该使用更易读的直接量来声明.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [x1, x2, x3];</div><div class="line"><span class="keyword">var</span> a2 = [x1, x2];</div><div class="line"><span class="keyword">var</span> a3 = [x1];</div><div class="line"><span class="keyword">var</span> a4 = [];</div></pre></td></tr></table></figure>

<p>虽然 Object 构造器没有上述类似的问题, 但鉴于可读性和一致性考虑, 最好还是在字面上更清晰地指明. 例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">o2.a = <span class="number">0</span>;</div><div class="line">o2.b = <span class="number">1</span>;</div><div class="line">o2.c = <span class="number">2</span>;</div><div class="line">o2[<span class="string">'strange key'</span>] = <span class="number">3</span>;</div></pre></td></tr></table></figure>

<p>应该写成:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = {};</div><div class="line"></div><div class="line"><span class="keyword">var</span> o2 = {</div><div class="line">  a: <span class="number">0</span>,</div><div class="line">  b: <span class="number">1</span>,</div><div class="line">  c: <span class="number">2</span>,</div><div class="line">  <span class="string">'strange key'</span>: <span class="number">3</span></div><div class="line">};</div></pre></td></tr></table></figure>

<h4 id="不要修改内置对象的原型">不要修改内置对象的原型</h4>
<p>千万不要修改内置对象, 如 Object.prototype 和 Array.prototype 的原型. 而修改内置对象, 如 Function.prototype 的原型, 虽然少危险些, 但仍会导致调试时的诡异现象. 所以也要避免修改其原型.</p>
<h3 id="JavaScript_小技巧(Tips_and_Tricks)">JavaScript 小技巧(Tips and Tricks)</h3>
<h4 id="True_和_False_布尔表达式">True 和 False 布尔表达式</h4>
<p>下面的布尔表达式都返回 false:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="literal">null</span></div><div class="line"><span class="literal">undefined</span></div><div class="line"><span class="string">''</span>          <span class="comment">// 空字符串</span></div><div class="line"><span class="number">0</span>           <span class="comment">//数字0</span></div></pre></td></tr></table></figure>

<p>但小心下面的, 可都返回 true:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">'0'</span>   <span class="comment">// 字符串0</span></div><div class="line">[]    <span class="comment">// 空数组</span></div><div class="line">{}    <span class="comment">// 空对象</span></div></pre></td></tr></table></figure>

<p>下面段比较糟糕的代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (x != <span class="literal">null</span>) {</div></pre></td></tr></table></figure>

<p>你可以直接写成下面的形式(只要你希望 x 不是 0 和空字符串, 和 false):</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (x) {</div></pre></td></tr></table></figure>

<p>如果你想检查字符串是否为 null 或空:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (y != <span class="literal">null</span> && y != <span class="string">''</span>) {</div></pre></td></tr></table></figure>

<p>但这样会更好:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (y) {</div></pre></td></tr></table></figure>

<p>注意: 还有很多需要注意的地方, 如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Boolean</span>(<span class="string">'0'</span>) == <span class="literal">true</span></div><div class="line"><span class="string">'0'</span> != <span class="literal">true</span></div><div class="line"><span class="number">0</span> != <span class="literal">null</span></div><div class="line"><span class="number">0</span> == []</div><div class="line"><span class="number">0</span> == <span class="literal">false</span></div><div class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>) == <span class="literal">false</span></div><div class="line"><span class="literal">null</span> != <span class="literal">true</span></div><div class="line"><span class="literal">null</span> != <span class="literal">false</span></div><div class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>) == <span class="literal">false</span></div><div class="line"><span class="literal">undefined</span> != <span class="literal">true</span></div><div class="line"><span class="literal">undefined</span> != <span class="literal">false</span></div><div class="line"><span class="built_in">Boolean</span>([]) == <span class="literal">true</span></div><div class="line">[] != <span class="literal">true</span></div><div class="line">[] == <span class="literal">false</span></div><div class="line"><span class="built_in">Boolean</span>({}) == <span class="literal">true</span></div><div class="line">{} != <span class="literal">true</span></div><div class="line">{} != <span class="literal">false</span></div></pre></td></tr></table></figure>

<h4 id="条件(三元)操作符_(?:)">条件(三元)操作符 (?:)</h4>
<p>三元操作符用于替代下面的代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (val != <span class="number">0</span>) {</div><div class="line">  <span class="keyword">return</span> foo();</div><div class="line">} <span class="keyword">else</span> {</div><div class="line">  <span class="keyword">return</span> bar();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>你可以写成:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> val ? foo() : bar();</div></pre></td></tr></table></figure>

<p>在生成 HTML 代码时也是很有用的:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> html = <span class="string">'&lt;input type="checkbox"'</span> +</div><div class="line">    (isChecked ? <span class="string">' checked'</span> : <span class="string">''</span>) +</div><div class="line">    (isEnabled ? <span class="string">''</span> : <span class="string">' disabled'</span>) +</div><div class="line">    <span class="string">' name="foo"&gt;'</span>;</div></pre></td></tr></table></figure>

<h4 id="&amp;&amp;_和_||">&amp;&amp; 和 ||</h4>
<p>二元布尔操作符是可短路的, 只有在必要时才会计算到最后一项.</p>
<p>“||” 被称作为 ‘default’ 操作符, 因为可以这样:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** @param {*=} opt_win */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(opt_win)</span> </span>{</div><div class="line">  <span class="keyword">var</span> win;</div><div class="line">  <span class="keyword">if</span> (opt_win) {</div><div class="line">    win = opt_win;</div><div class="line">  } <span class="keyword">else</span> {</div><div class="line">    win = <span class="built_in">window</span>;</div><div class="line">  }</div><div class="line">  <span class="comment">// ...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>你可以使用它来简化上面的代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** @param {*=} opt_win */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(opt_win)</span> </span>{</div><div class="line">  <span class="keyword">var</span> win = opt_win || <span class="built_in">window</span>;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>“&amp;&amp;” 也可简短代码.比如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (node) {</div><div class="line">  <span class="keyword">if</span> (node.kids) {</div><div class="line">    <span class="keyword">if</span> (node.kids[index]) {</div><div class="line">      foo(node.kids[index]);</div><div class="line">    }</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>你可以像这样来使用:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (node && node.kids && node.kids[index]) {</div><div class="line">  foo(node.kids[index]);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>或者:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> kid = node && node.kids && node.kids[index];</div><div class="line"><span class="keyword">if</span> (kid) {</div><div class="line">  foo(kid);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>不过这样就有点儿过头了:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node && node.kids && node.kids[index] && foo(node.kids[index]);</div></pre></td></tr></table></figure>

<h4 id="使用_join()_来创建字符串">使用 join() 来创建字符串</h4>
<p>通常是这样使用的:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listHtml</span><span class="params">(items)</span> </span>{</div><div class="line">  <span class="keyword">var</span> html = <span class="string">'&lt;div class="foo"&gt;'</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; ++i) {</div><div class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) {</div><div class="line">      html += <span class="string">', '</span>;</div><div class="line">    }</div><div class="line">    html += itemHtml(items[i]);</div><div class="line">  }</div><div class="line">  html += <span class="string">'&lt;/div&gt;'</span>;</div><div class="line">  <span class="keyword">return</span> html;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>但这样在 IE 下非常慢, 可以用下面的方式:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listHtml</span><span class="params">(items)</span> </span>{</div><div class="line">  <span class="keyword">var</span> html = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; ++i) {</div><div class="line">    html[i] = itemHtml(items[i]);</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> <span class="string">'&lt;div class="foo"&gt;'</span> + html.join(<span class="string">', '</span>) + <span class="string">'&lt;/div&gt;'</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>你也可以是用数组作为字符串构造器, 然后通过 myArray.join(‘’) 转换成字符串. 不过由于赋值操作快于数组的 push(), 所以尽量使用赋值操作.</p>
<h4 id="类型检测_(来源于_jQuery_Core_Style_Guidelines)">类型检测 (来源于 jQuery Core Style Guidelines)</h4>
<ul>
<li><p>直接类型（实际类型，Actual Types）</p>
<p>  String:</p>
<pre><code>  <span class="keyword">typeof</span> variable === <span class="string">"string"</span>
</code></pre><p>  Number:</p>
<pre><code>  <span class="keyword">typeof</span> variable === <span class="string">"number"</span>
</code></pre><p>  Boolean:</p>
<pre><code>  <span class="keyword">typeof</span> variable === <span class="string">"boolean"</span>
</code></pre><p>  Object:</p>
<pre><code>  <span class="keyword">typeof</span> variable === <span class="string">"object"</span>
</code></pre><p>  Array:</p>
<pre><code>  <span class="built_in">Array</span>.<span class="built_in">isArray</span>(arrayLikeObject)
  (如果可能的话)
</code></pre><p>  Node:</p>
<pre><code><span class="attribute">  elem.nodeType ==</span>=<span class="string"> 1</span>
</code></pre><p>  null:</p>
<pre><code>  <span class="variable">variable =</span>== <span class="constant">null</span>
</code></pre><p>  null or undefined:</p>
<pre><code>  <span class="variable">variable =</span>= <span class="constant">null</span>
</code></pre><p>  undefined:</p>
<pre><code>全局变量:

  <span class="keyword">typeof</span> variable === <span class="string">"undefined"</span>

局部变量:

  variable === undefined

属性:

  <span class="keyword">object</span>.prop === undefined
  <span class="keyword">object</span>.hasOwnProperty(prop)
  <span class="string">"prop"</span> <span class="keyword">in</span> <span class="keyword">object</span>
</code></pre></li>
<li><p>转换类型（强制类型，Coerced Types）</p>
<p>  考虑下面这个的含义…</p>
<p>  给定的 HTML:</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"foo-input"</span> <span class="attribute">value</span>=<span class="value">"1"</span>&gt;</span></div></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// `foo` 已经被赋予值 `0`，类型为 `number`</span></div><div class="line"><span class="keyword">var</span> foo = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// typeof foo;</span></div><div class="line"><span class="comment">// "number"</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">// 在后续的代码中，你需要更新 `foo`，赋予在 input 元素中得到的新值</span></div><div class="line"></div><div class="line">foo = <span class="built_in">document</span>.getElementById(<span class="string">"foo-input"</span>).value;</div><div class="line"></div><div class="line"><span class="comment">// 如果你现在测试 `typeof foo`, 结果将是 `string`</span></div><div class="line"><span class="comment">// 这意味着你在 if 语句检测 `foo` 有类似于此的逻辑:</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (foo === <span class="number">1</span>) {</div><div class="line">  importantTask();</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// `importantTask()` 将永远不会被执行，即使 `foo` 有一个值 "1"</span></div><div class="line"></div><div class="line"><span class="comment">// 你可以巧妙地使用 + / - 一元运算符强制转换类型以解决问题:</span></div><div class="line"></div><div class="line">foo = +<span class="built_in">document</span>.getElementById(<span class="string">"foo-input"</span>).value;</div><div class="line"><span class="comment">//    ^ + 一元运算符将它右边的运算对象转换为 `number`</span></div><div class="line"></div><div class="line"><span class="comment">// typeof foo;</span></div><div class="line"><span class="comment">// "number"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (foo === <span class="number">1</span>) {</div><div class="line">  importantTask();</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// `importantTask()` 将被调用</span></div></pre></td></tr></table></figure>

<pre><code>对于强制类型转换这里有几个例子:
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> number = <span class="number">1</span>,</div><div class="line">  string = <span class="string">"1"</span>,</div><div class="line">  bool = <span class="literal">false</span>;</div><div class="line"></div><div class="line">number;</div><div class="line"><span class="comment">// 1</span></div><div class="line"></div><div class="line">number + <span class="string">""</span>;</div><div class="line"><span class="comment">// "1"</span></div><div class="line"></div><div class="line">string;</div><div class="line"><span class="comment">// "1"</span></div><div class="line"></div><div class="line">+string;</div><div class="line"><span class="comment">// 1</span></div><div class="line"></div><div class="line">+string++;</div><div class="line"><span class="comment">// 1</span></div><div class="line"></div><div class="line">string;</div><div class="line"><span class="comment">// 2</span></div><div class="line"></div><div class="line">bool;</div><div class="line"><span class="comment">// false</span></div><div class="line"></div><div class="line">+bool;</div><div class="line"><span class="comment">// 0</span></div><div class="line"></div><div class="line">bool + <span class="string">""</span>;</div><div class="line"><span class="comment">// "false"</span></div></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> number = <span class="number">1</span>,</div><div class="line">  string = <span class="string">"1"</span>,</div><div class="line">  bool = <span class="literal">true</span>;</div><div class="line"></div><div class="line">string === number;</div><div class="line"><span class="comment">// false</span></div><div class="line"></div><div class="line">string === number + <span class="string">""</span>;</div><div class="line"><span class="comment">// true</span></div><div class="line"></div><div class="line">+string === number;</div><div class="line"><span class="comment">// true</span></div><div class="line"></div><div class="line">bool === number;</div><div class="line"><span class="comment">// false</span></div><div class="line"></div><div class="line">+bool === number;</div><div class="line"><span class="comment">// true</span></div><div class="line"></div><div class="line">bool === string;</div><div class="line"><span class="comment">// false</span></div><div class="line"></div><div class="line">bool === !!string;</div><div class="line"><span class="comment">// true</span></div></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> num = <span class="number">2.5</span>;</div><div class="line"></div><div class="line"><span class="built_in">parseInt</span>(num, <span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="comment">// 等价于...</span></div><div class="line"></div><div class="line">~~num;</div><div class="line"></div><div class="line">num &gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line">num &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// 结果都是 2</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 时刻牢记心底, 负值将被区别对待...</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> neg = -<span class="number">2.5</span>;</div><div class="line"></div><div class="line"><span class="built_in">parseInt</span>(neg, <span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="comment">// 等价于...</span></div><div class="line"></div><div class="line">~~neg;</div><div class="line"></div><div class="line">neg &gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// 结果都是 -2</span></div><div class="line"><span class="comment">// 但是...</span></div><div class="line"></div><div class="line">neg &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// 结果即是 4294967294</span></div></pre></td></tr></table></figure>

<ul>
<li>字符串转换为整数</li>
</ul>
<p>将字符串转换为整数有以下几种方式，可以在<a href="http://jsperf.com/converting-string-to-int/2" target="_blank" rel="external">这里</a>进行测试对比：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> number1 = <span class="string">"45"</span>;</div><div class="line"><span class="comment">// ParseInt() Test on chrome for mac:31% slower</span></div><div class="line"><span class="keyword">var</span> i = <span class="built_in">parseInt</span>(number1);</div><div class="line"><span class="comment">// Using unary Test on chrome for mac:67% slower</span></div><div class="line"><span class="keyword">var</span> j = +number1;</div><div class="line"><span class="comment">// Number constructor Test on chrome for mac:59% slower</span></div><div class="line"><span class="keyword">var</span> k = <span class="built_in">Number</span>(number1);</div><div class="line"><span class="comment">// By multplication Test on chrome for mac:69% slower</span></div><div class="line"><span class="keyword">var</span> l = number1 * <span class="number">1</span>;</div><div class="line"><span class="comment">// parseInt with Test on chrome for mac:radix ±3.85% fastest</span></div><div class="line"><span class="keyword">var</span> m = <span class="built_in">parseInt</span>(number1, <span class="number">10</span>);</div></pre></td></tr></table></figure>

<p>所以推荐使用 parseInt(number1, 10) 这种方式，不过 +number1 更为简单，在操作次数极少的情况下也可以酌情使用。</p>
<h4 id="对比运算">对比运算</h4>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当只是判断一个 array 是否有长度，相对于使用这个:</span></div><div class="line"><span class="keyword">if</span> (array.length &gt; <span class="number">0</span>) ...</div><div class="line"></div><div class="line"><span class="comment">// ...判断真伪, 请使用这种:</span></div><div class="line"><span class="keyword">if</span> (array.length) ...</div><div class="line"></div><div class="line"><span class="comment">// 当只是判断一个 array 是否为空，相对于使用这个:</span></div><div class="line"><span class="keyword">if</span> (array.length === <span class="number">0</span>) ...</div><div class="line"></div><div class="line"><span class="comment">// ...判断真伪, 请使用这种:</span></div><div class="line"><span class="keyword">if</span> (!array.length) ...</div><div class="line"></div><div class="line"><span class="comment">// 当只是判断一个 string 是否为空，相对于使用这个:</span></div><div class="line"><span class="keyword">if</span> (string !== <span class="string">""</span>) ...</div><div class="line"></div><div class="line"><span class="comment">// ...判断真伪, 请使用这种:</span></div><div class="line"><span class="keyword">if</span> (string) ...</div><div class="line"></div><div class="line"><span class="comment">// 当只是判断一个 string 是为空，相对于使用这个:</span></div><div class="line"><span class="keyword">if</span> (string === <span class="string">""</span>) ...</div><div class="line"></div><div class="line"><span class="comment">// ...判断真伪, 请使用这种:</span></div><div class="line"><span class="keyword">if</span> (!string) ...</div><div class="line"></div><div class="line"><span class="comment">// 当只是判断一个引用是为真，相对于使用这个:</span></div><div class="line"><span class="keyword">if</span> (foo === <span class="literal">true</span>) ...</div><div class="line"></div><div class="line"><span class="comment">// ...判断只需像你所想，享受内置功能的好处:</span></div><div class="line"><span class="keyword">if</span> (foo) ...</div><div class="line"></div><div class="line"><span class="comment">// 当只是判断一个引用是为假，相对于使用这个:</span></div><div class="line"><span class="keyword">if</span> (foo === <span class="literal">false</span>) ...</div><div class="line"></div><div class="line"><span class="comment">// ...使用叹号将其转换为真</span></div><div class="line"><span class="keyword">if</span> (!foo) ...</div><div class="line"></div><div class="line"><span class="comment">// ...需要注意的是：这个将会匹配 0, "", null, undefined, NaN</span></div><div class="line"><span class="comment">// 如果你 _必须_ 是布尔类型的 false，请这样用：</span></div><div class="line"><span class="keyword">if</span> (foo === <span class="literal">false</span>) ...</div><div class="line"></div><div class="line"><span class="comment">// 如果想计算一个引用可能是 null 或者 undefined，但并不是 false, "" 或者 0,</span></div><div class="line"><span class="comment">// 相对于使用这个：</span></div><div class="line"><span class="keyword">if</span> (foo === <span class="literal">null</span> || foo === <span class="literal">undefined</span>) ...</div><div class="line"></div><div class="line"><span class="comment">// ...享受 == 类型强制转换的好处，像这样:</span></div><div class="line"><span class="keyword">if</span> (foo == <span class="literal">null</span>) ...</div><div class="line"></div><div class="line"><span class="comment">// 谨记，使用 == 将会令 `null` 匹配 `null` 和 `undefined`</span></div><div class="line"><span class="comment">// 但不是 `false`，"" 或者 0</span></div><div class="line"><span class="literal">null</span> == <span class="literal">undefined</span></div></pre></td></tr></table></figure>

<p>总是判断最好、最精确的值，上述是指南而非教条。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 类型转换和对比运算说明</span></div><div class="line"><span class="comment">// 首次 `===`，`==` 次之 (除非需要松散类型的对比)</span></div><div class="line"><span class="comment">// `===` 总不做类型转换，这意味着:</span></div><div class="line"><span class="string">"1"</span> === <span class="number">1</span>;</div><div class="line"><span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="comment">// `==` 会转换类型，这意味着:</span></div><div class="line"><span class="string">"1"</span> == <span class="number">1</span>;</div><div class="line"><span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 布尔, 真 & 伪</span></div><div class="line"><span class="comment">// 布尔:</span></div><div class="line"><span class="literal">true</span>, <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment">// 真:</span></div><div class="line"><span class="string">"foo"</span>, <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">// 伪:</span></div><div class="line"><span class="string">""</span>, <span class="number">0</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">NaN</span>, <span class="keyword">void</span> <span class="number">0</span></div></pre></td></tr></table></figure>

<h4 id="Misc">Misc</h4>
<p>这个部分将要说明的想法和理念都并非教条。相反更鼓励对现存实践保持好奇，以尝试提供完成一般 JavaScript 编程任务的更好方案。</p>
<ul>
<li>提前返回值提升代码的可读性并且没有太多性能上的差别</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 不好:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnLate</span><span class="params">(foo)</span> </span>{</div><div class="line">  <span class="keyword">var</span> ret;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (foo) {</div><div class="line">    ret = <span class="string">"foo"</span>;</div><div class="line">  } <span class="keyword">else</span> {</div><div class="line">    ret = <span class="string">"quux"</span>;</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> ret;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// 好:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnEarly</span><span class="params">(foo)</span> </span>{</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (foo) {</div><div class="line">    <span class="keyword">return</span> <span class="string">"foo"</span>;</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> <span class="string">"quux"</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>for循环遍历</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// for循环遍历:</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++){</div><div class="line">    <span class="comment">// doSomething here</span></div><div class="line">}</div><div class="line"><span class="comment">// 上面的方式优于:</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++){</div><div class="line">    <span class="comment">// doSomething here</span></div><div class="line">}</div><div class="line"><span class="comment">// 前一种方式只会计算一次 arr 的长度，而后一种方式会计算 arr.length + 1 次，效率比较低</span></div></pre></td></tr></table></figure>

<h2 id="保持一致性-">保持一致性.</h2>
<p>当你在编辑代码之前, 先花一些时间查看一下现有代码的风格. 如果他们给算术运算符添加了空格, 你也应该添加. 如果他们的注释使用一个个星号盒子, 那么也请你使用这种方式.</p>
<p>代码风格中一个关键点是整理一份常用词汇表, 开发者认同它并且遵循, 这样在代码中就能统一表述. 我们在这提出了一些全局上的风格规则, 但也要考虑自身情况形成自己的代码风格. 但如果你添加的代码和现有的代码有很大的区别, 这就让阅读者感到很不和谐. 所以, 避免这种情况的发生.</p>
]]></content>
    <summary type="html">
    <![CDATA[javascript 前端开发规范]]>
    
    </summary>
    
      <category term="技术" scheme="http://topdna.org/tags/tech/"/>
    
      <category term="JavaScript" scheme="http://topdna.org/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://topdna.org/tags/frontend/"/>
    
      <category term="技术" scheme="http://topdna.org/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[美股退市规则]]></title>
    <link href="http://topdna.org/investment/delisting-rules/"/>
    <id>http://topdna.org/investment/delisting-rules/</id>
    <published>2013-06-08T03:46:13.000Z</published>
    <updated>2013-09-13T03:06:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="纳斯达克的退市标准">纳斯达克的退市标准</h2>
<p>根据纳斯达克的有关规定,上市条件分为<strong>初始上市要求</strong>和<strong>持续上市要求</strong>,而且后者是与前者相互对应的。只有符合初始上市要求的公司才能上市。上市以后,由于上市公司的状况可能会发生变化,不一定始终保持初始的状态,但起码应当符合一个最低的要求,即所谓持续上市要求,否则将会被纳斯达克予以摘牌。 以纳斯达克小型资本市场为例,其持续上市标准包括：</p>
<ol>
<li>有形净资产不得低于200万美元；</li>
<li>市值不得低于3500万美元；</li>
<li>净收益最近一个会计年度或最近三个会计年度中的两年不得低于50万美元；</li>
<li>公众持股量不得低于50万股；</li>
<li>公众持股市值不得低于100万美元；</li>
<li>最低报买价不得低于1美元；</li>
<li>做市商数不得少于2个；</li>
<li>股东人数不得少于300个。</li>
</ol>
<p><a id="more"></a><br>上市公司如果达不到这些持续上市要求,将无法保留其上市资格。就最低报买价来说,纳斯达克市场规定,上市公司的股票如果每股价格不足一美元,且这种状态持续30个交易日,纳斯达克市场将发出亏损警告,被警告的公司如果在警告发出的90天里,仍然不能采取相应的措施进行自救以改变其股价,将被宣布停止股票交易。这就是所谓的“一美元退市规则”。“一美元”是纳斯达克判断上市公司是否亏损的市场标准,而不是公司的实际经营状况。但是,这一市场标准也客观地反映了上市公司的真实内在价值。<br>除以上数量指标外,纳斯达克市场对公司的初始上市或持续上市还有其他要求,主要包括：</p>
<ol>
<li>法人治理结构方面的要求,包括年报、中报的报送,独立董事,内部审核委员会,股东大会,投票机制,征集代理表决权机制,避免利益冲突等；</li>
<li>对公司经营合规守法方面的要求。</li>
</ol>
<p>据统计,在纳斯达克市场80%左右的股票在上市后的第3年便因公司破产或被购并而退市。可见,在纳斯达克市场上,上市公司退市是一种十分普遍和正常的市场行为。</p>
<h2 id="纽约证券交易所的退市标准">纽约证券交易所的退市标准</h2>
<p>在美国,上市公司退市的主要标准包括：股权的分散程度、股权结构、经营业绩、资产规模和股利的分配情况。上市公司只要符合以下条件之一就必须终止上市：</p>
<ol>
<li>股东少于600个,持有100股以上的股东少于400个；</li>
<li>社会公众持有股票少于20万股,或其总市值少于100万美元；</li>
<li>过去的5年经营亏损；</li>
<li>总资产少于400万美元,而且过去4年每年亏损；</li>
<li>总资产少于200万美元,并且过去2年每年亏损；</li>
<li>连续5年不分红利。</li>
</ol>
<p>纽约证券交易所对上市公司终止上市作了比较具体的规定,这些规定主要涉及以下几个方面：</p>
<ol>
<li>公众股东数量达不到交易所规定的标准；</li>
<li>股票交易量极度萎缩,低于交易所规定的最低标准；</li>
<li>因资产处置、冻结等因素而失去持续经营能力；</li>
<li>法院宣布该公司破产清算；</li>
<li>财务状况和经营业绩欠佳；</li>
<li>不履行信息披露义务；</li>
<li>违反法律；</li>
<li>违反上市协议。</li>
</ol>
<h3 id="参考">参考</h3>
<ul>
<li><a href="http://www.baike.com/wiki/%E7%BE%8E%E8%82%A1%E9%80%80%E5%B8%82%E8%A7%84%E5%88%99" target="_blank" rel="external">美股退市规则</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[纳斯达克退市标准及纽约证券交易所退市标准]]>
    
    </summary>
    
      <category term="理财" scheme="http://topdna.org/tags/investment/"/>
    
      <category term="理财" scheme="http://topdna.org/categories/investment/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从几本书说开去]]></title>
    <link href="http://topdna.org/investment/about-some-books/"/>
    <id>http://topdna.org/investment/about-some-books/</id>
    <published>2012-10-27T13:07:06.000Z</published>
    <updated>2013-09-21T11:50:13.000Z</updated>
    <content type="html"><![CDATA[<p>从Ali离职前后的三个多月时间里，突然多了些闲暇时光。想想过去的穷忙之累，终于可以静下心来做点自己喜欢的事，看下之前想看的书，规划下自己的未来了……</p>
<p>在这三个月左右的时间里看了十来本书，比我之前三年看的书都要多。这些书对我的观念产生了巨大影响，不夸张地说将会是我人生的一个转折点。绝大部分书籍是跟“财富”相关的，当然也有部分技术书籍，鉴于其不具普适性暂且不表。财富，或者钱的问题一直是我先前不愿谈及的——我们接受的教育也大抵如是：“万般皆下品，唯有读书高”；“书中自有黄金屋”；好好学习考所好学校，毕业了找份高薪好工作；钱是充满“铜臭”的东西，谈钱是庸俗的；所有的这些理念都导致了学校里不会普及财富相关教育。然而我也知道，尽管我不愿意谈论钱，但这确是生活必须的，不可少的，也是内心渴望能够掌控的，现在社会衡量一个人成功与否的标准很大程度上来说也取决于他所获得的财富，所以像个鸵鸟一样去逃避不是办法，终究是要去面对的。  .</p>
<p><a id="more"></a><br>事实上目前的整个大环境都对物质方面要求很高。我认为这不是某些或者一代人的问题，最主要的还是社会环境造成的：税收、通货膨胀、高房价、高物价、盲目攀比、铺张浪费、现行养老政策入不敷出，未来人口老龄化等等这些都导致了每个年青人都“缺钱”，没有安全感，压力山大，当生存都有问题的时候不会有人去谈论理想、去欣赏文学和艺术，去追寻内心的平静……</p>
<p>埋怨是没有用的，要么去改变要么去适应。也正因为如此更需要学习理财知识。我坚信任何技能都是可以通过有意识的专业学习得到提高的。理财技能亦复如是。虽然我们每天都在挣钱、花钱、以各种方式同金钱打交道，但这并不意味着我们掌握了理财技能。而学习这些技能，书籍——我认为是最佳途径。</p>
<p>下面列出一些我个人认为还算不错的投资理财相关书籍，看与不看，汝自决之：</p>
<ol>
<li><p>《30年后你拿什么养活自己？》<br>这本书有两册，可谓关于现行养老制度的醒世恒言，虽然作者是韩国人，不过大致的情况跟中国还是很像的。简单地说随着人口老龄化逐渐加重，养老金入不敷出，以后指望政府养老是靠不住的，最好就完全不要指望，最后如果有养老金只能当“意外惊喜”，不能当“活命钱”。这些问题对80、甚至90后来说似乎考虑太早，其实不然，这种意识越早形成越好，及早准备才能轻松应对。</p>
</li>
<li><p>《富爸爸穷爸爸》<br>这个书有一个系列很多本。目前只看过最早也是最经典的一本。穷人和富人之间之所以差别这么明显从根源上来说还是：性格、思想、行为上的差异。财富观念的不同产生不同的行为最终出现不同的结果。所以要想改变命运先从改变观念开始……</p>
</li>
<li><p>《西施的财富》<br>这本书也有两册，不过我觉得第一本要比第二本更经典些，可能是因为第二本里面很多知识我在其他书籍里面也看到过。不过总体来说这两本书都是颇值得一读的。作者是个国人，里面所讲述的东西也很符合当下的国情，文笔不错，观点客观、犀利、而且一针见血，以理财和投资为主线但是关于权利、欲望、成功、幸福、爱情、养老、住房、子女教育以及国内股票市场的各种“黑幕”、“潜规则”等等皆有论述。我倒觉得理财之外的其他论述是此书更大的亮点，是一般理财书籍里面鲜有论及的，同时从塑造全面的理财观念上来说也是至关重要的。这两本书都很不错，作者用心良苦。</p>
</li>
</ol>
<p>接下来的几本书籍都是关于证券投资的，说白了就是炒股，“股市有风险，入股需谨慎”，鉴于国内的股票市场很不规范，专坑散户的，所以建议大家不要去炒股。尤其是很多炒股的人都很盲目，不知道自己在做什么，不知道为啥要买那只股票，只是听说那是家大公司、或者听人推荐、或者一些道听途说的消息等等就匆忙下了决定。到最后导致血本无归。证券市场上总是10%的人赚了其他90%的人的钱。亏本的很多，以至于大家觉得那无异于赌博，同时听到有人赚钱了就经不起诱惑，想当然地觉得自己很聪明、很幸运，觉得自己也可以成功……。结果很多人都是花钱买教训去了。当然除了花钱买教训之外还可以通过学习来培养正确的投资理念，掌握基本的证券分析、筛选技能等等，从而避免损失。有几本书还不错：</p>
<ol>
<li><p>《彼得·林奇的成功投资》<br>这本书相比下一本还是相当的通俗易懂的。“彼得·林奇是美国，乃至全球首屈一指的投资专家，他对共同基金的贡献，就像乔丹对篮球的贡献，其共同之处在于把投资变成了一种艺术，把投资提升到一个新的境界。”。这本书用浅显生动的语言娓娓道出了股票投资的诸多技巧，为中小投资者提供了简单易学的投资分析方法，这些方法是作者多年的经验总结，具有很强的实践性，对于业余投资者来说尤为有益。</p>
</li>
<li><p>本杰明·格雷厄姆的《聪明的投资者》<br>这本书相对来说难度要大点，虽然也是针对普通大众的通俗读物。但整体感觉有些理论深度，介绍的证券投资分析方法也更全面。本杰明·格雷厄姆被称为证券分析之父，是巴菲特的老师。可以说，美国的对冲基金的管理者几乎无一例外地都认真研读过格雷厄姆的这一杰作，并将书中的名言、名句引为“圣旨”。格雷厄姆提出了价值投资理论。根据这种理论进行投资客观上来说具有更大的安全空间。</p>
</li>
<li><p>《巴菲特致股东的信：股份公司教程》<br>本书收录了投资大师沃伦·巴菲特写给伯克希尔－哈撒韦公司股东的信，探讨的主题涵盖管理、投资及评估等，其中核心的精神是由格雷厄姆和托德提出的，书中论述了公司治理、公司财务与投资、普通股、兼并与收购及会计与纳税等内容，是一本既精炼又富于实用性和教育性的投资手册。不过个人觉得这本书是难度最大的，主要是因为没有相关经历，理解起来很困难。只看了一部分，放在以后读应该更好些。</p>
</li>
<li><p>还有几本书计划看，等以后有时间了再说吧，而且这几本书要看完花的时间也更多，有些偏理论，而且有的还挺厚的：<br>菲利普·A·费舍的《怎样选择成长股》、本杰明·格雷厄姆的《证券分析》上下两册、马丁·弗里德森等的《财务报表分析》等。</p>
</li>
</ol>
<p>总之，证券投资是有很大风险的。如果不了解最好不要去碰。而且这些书里面讨论的方法未必适合国内畸形的股票市场。同时如果有投资想法就要对自己的行为负责，要学会用优秀的投资观念武装自己，宁求安全，拒绝贪婪。</p>
<p>最后我要说的是，读书的这段期间也是我成长收获最大的一段时光。可惜的是随着各种网络和电子设备的普及很多人已经没有了阅读习惯。现在想想获取知识的最佳途径除了动手实践之外就是读书了，书籍所以被出版出来是因为它是精华的结晶，而网络上漫无目的的筛选、浏览，看看新闻、逛逛论坛、聊聊天等等很大程度上都是虚度光阴。</p>
<p><span class="alignright ps">2012.10.27@HZ.BJ</span></p>
]]></content>
    <summary type="html">
    <![CDATA[现在不学习投资理财，30年后你拿什么养活自己？郑重推荐几本很不错的投资理财书籍给大家。]]>
    
    </summary>
    
      <category term="读书" scheme="http://topdna.org/tags/reading/"/>
    
      <category term="理财" scheme="http://topdna.org/tags/investment/"/>
    
      <category term="理财" scheme="http://topdna.org/categories/investment/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dance Training Manage System Based on Mongo Db and Node]]></title>
    <link href="http://topdna.org/tech/dance-training-manage-system/"/>
    <id>http://topdna.org/tech/dance-training-manage-system/</id>
    <published>2012-06-06T13:04:15.000Z</published>
    <updated>2013-09-21T12:13:30.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><h1 id="Fork_me_on_GitHub"><a href="https://github.com/hustcer/latinode" target="_blank" rel="external">Fork me on GitHub</a></h1>
</li>
<li><h1 id="Design_and_Develop_Doc(-pdf)"><a href="/resource/doc/system-design-and-develop-doc.pdf">Design and Develop Doc(.pdf)</a></h1>
</li>
</ul>
<h2 id="Summary：">Summary：</h2>
<p>This’s a dance training manage system based on <strong>NodeJS、Express Web Framework、Jade、MongoDB、MongoSkin and Nodemailer, etc.</strong>.The web application is built for dancers of Alibaba and the goal is mainly focused on dance course signing up management.</p>
<p><a id="more"></a></p>
<h2 id="Features">Features</h2>
<p>System consists of dancer forground and admin background. When started in production mode dancers can visit the basic forground pages without login. And if started in development mode the application will give you the admin’s rights. Detailed as follows:</p>
<h3 id="Dancer_Forground：">Dancer Forground：</h3>
<ul>
<li><strong>Online Course Signing Up:</strong><br><ul>
<li>The sign up page will show you the realtime infomation of current courses, such as dance type, course capacity, total applied dancers, total approved dancers, and some other notice.<br></li>
<li>For New Dancers: You should fill the basic information, such as: job number, name, email, wangwang, etc.; Choosing the course you want to take; Then Submit; And the information will be stored into mongodb database.<br></li>
<li>For the Signed Dancers: Just fill your job number and system will fetch and fill the information you have submitted before; Then choose the course you want to take; And Submit. BTW: You can also update your information as well.<br></li>
<li>The applied courses will be audited by admin manually or by system automatically acoording to certain rules, such as whether man should be approved first or not, the capacity of course, total approved dancers and so on.<br></li>
<li>You can cancell the applied course before being auditted, and apply for quitness if it’s approved.<br></li>
<li>Quiting of course should be audited too: Namely, could be refused or approved by admin in background.<br></li>
</ul>
</li>
<li>Dancers can view their personal information and the courses they have taken.</li>
<li>Dancers could be searched or filtered according to their job number, department, gender, courses, course status or payment status.</li>
<li>The filtered result will be paged, and could be sorted according to certain field by forground user.</li>
<li>Generate the mailing list of dancers which satisfy certain condition.<br></li>
<li>Get a mail notification for those who have applied successfully or quit successfully.</li>
</ul>
<h3 id="Admin_Background:">Admin Background:</h3>
<ul>
<li><p><strong>Course Life Cycle Management:</strong><br></p>
<ul>
<li>Newly applied course status—————————————-(waiting)；<br></li>
<li>Dancer cancelled course status——————————(cancelled)；<br></li>
<li>Admin refused course status—————————————-(refused)；<br></li>
<li>Admin approved course status———————————(approved)；<br></li>
<li>Quit applied after approving———————————-(quitApplied)；<br></li>
<li>Quit refused by admin———————————————(approved)；<br></li>
<li><p>Quit approved by admin———————————————————(quit)；</p>
<p>Notice:<em>The life cycle status changing of courses should satisfy their pre-conditions, for example: Waiting courses can’t change to Quit directly, but to cancelled is ok. And only the Waiting or QuitApplied courses could be changed to Approved, but approved ones can not change to waiting directly, only the quitApplied course could be changed to quit after refunding, and so on.</em></p>
</li>
</ul>
</li>
<li><p><strong>Course Payment Status Manage</strong><br></p>
<ul>
<li>Courses could be set to paid by admin if they are.</li>
<li>Quit applied courses could be refund and set to be unpaid(and then approve the quitness).</li>
</ul>
</li>
<li><strong>Dancer Information Management</strong><br><ul>
<li>Dancer basic and advanced property(such as:level(&lt;=9), vip grade(&lt;=5), forever status、lock status and so on) could be modified by admin .<br></li>
</ul>
</li>
</ul>
<h2 id="Deploy_Instruction：">Deploy Instruction：</h2>
<ol>
<li>Install NodeJs;</li>
<li>Install MongoDB and start the service;</li>
<li>Clone the repository: git clone <a href="https://github.com/hustcer/latinode.git" target="_blank" rel="external">https://github.com/hustcer/latinode.git</a>;</li>
<li>cd latinode &amp; npm install -d &amp; node app.js;</li>
<li>That’s All! Visit <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> in your browser, You will have it!<br><br></li>
</ol>
<hr>
<h1 id="基于MongoDB和NodeJS的舞蹈培训管理系统">基于MongoDB和NodeJS的舞蹈培训管理系统</h1>
<h2 id="摘要：">摘要：</h2>
<p>本应用为基于<strong>NodeJS、Express Web Framework、Jade、MongoDB、MongoSkin、Nodemailer</strong>等技术构建的Alibaba舞蹈培训管理系统。目前以舞蹈培训报名管理功能为主。</p>
<h2 id="功能描述">功能描述</h2>
<p>本应用分前台、后台两部分：前台以production模式启动，用户免登陆访问；后台以development模式启动，兼有会员管理功能。具体描述如下：</p>
<h3 id="用户前台功能：">用户前台功能：</h3>
<ul>
<li><strong>实现网上报名：</strong><br><ul>
<li>报名页显示当前开设课程实时信息（舞种、额定人数，已申请人数、报名成功人数等）。<br></li>
<li>新用户：填写基本信息：工号、姓名、邮箱、旺旺等；选择培训课程；提交；系统存入数据库。</li>
<li>老用户：输入工号后，系统根据工号自动获取显示相关信息；会员选择培训课程；提交报名；同时可以修改个人信息。<br></li>
<li>会员申请报名后需管理员手工审核，也可以由系统根据一定规则：是否男士优先、课程总容量、当前报名成功人数等，对课程进行自动审核。<br></li>
<li>课程审核通过前用户可自行取消，审核通过后用户可申请退课。<br></li>
<li>退课需管理员审核：可以拒绝退课；或者线下退费、退课（后台）。<br></li>
</ul>
</li>
<li>用户可以查看个人信息及参加的培训课程等。</li>
<li>用户可以查询课程报名情况：根据工号、部门、性别、课程、报名状态、缴费状态等条件进行组合查询、筛选。</li>
<li>查询结果分页展示，可以对某些字段进行排序。</li>
<li>可以生成满足特定条件的会员的邮件列表。</li>
<li>用户报名审核通过或者退课审核通过会收到邮件通知。</li>
</ul>
<h3 id="后台功能：">后台功能：</h3>
<ul>
<li><p><strong>课程生命周期管理：</strong><br></p>
<ul>
<li>新申请报名课程状态为待审核————————————————(waiting)；<br></li>
<li>管理员审核前用户可以自助取消————————————-(cancelled)；<br></li>
<li>管理员可以审核拒绝—————————————————————-(refused)；<br></li>
<li>或者审核通过则报名成功—————————————————(approved)；<br></li>
<li>报名成功后会员可以申请退课—————————————(quitApplied)；<br></li>
<li>退课需要管理员审核，审核拒绝则回到报名成功——-(approved)；<br></li>
<li>退课审核通过则处于退课成功——————————————————-(quit)；<br><br><strong>注意：</strong>对于课程生命状态转换系统会验证是否满足前置条件：比如waiting状态不能直接转为quit，但是可以转换为cancelled，只有waiting或者quiteApplied状态的可以转换为approved, 而approved不能转为waiting，只有quitApplied的课程可以转为quit，并且需要先退费等。</li>
</ul>
</li>
<li><p><strong>课程缴费状态设置：</strong><br></p>
<ul>
<li>报名成功的会员在缴费后管理员可以将其设为已缴费。</li>
<li>申请退课的会员可以线下退费并修改其状态为未缴费，然后退课。</li>
</ul>
</li>
<li><p><strong>管理员修改会员信息：</strong><br></p>
<ul>
<li>会员可以修改自身基本信息，管理员可以修改其基本及高级属性比如：<br>level(&lt;=9)、vip等级(&lt;=5)、forever状态（年卡）、lock状态等。</li>
</ul>
</li>
</ul>
<h2 id="应用部署说明：">应用部署说明：</h2>
<ol>
<li>安装NodeJs；</li>
<li>安装MongoDB并启动；</li>
<li>Clone代码：git clone <a href="https://github.com/hustcer/latinode.git" target="_blank" rel="external">https://github.com/hustcer/latinode.git</a>;</li>
<li>cd latinode &amp; npm install -d &amp; node app.js;</li>
<li>That’s All! 访问：<a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> 即可。<br><br></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[This's a dance training manage system based on NodeJS、Express Web Framework、Jade、MongoDB、MongoSkin and Nodemailer, etc.The web application is built for dancers of Alibaba]]>
    
    </summary>
    
      <category term="技术" scheme="http://topdna.org/tags/tech/"/>
    
      <category term="Nodejs" scheme="http://topdna.org/tags/Nodejs/"/>
    
      <category term="Mongodb" scheme="http://topdna.org/tags/Mongodb/"/>
    
      <category term="Jade" scheme="http://topdna.org/tags/Jade/"/>
    
      <category term="Express" scheme="http://topdna.org/tags/Express/"/>
    
      <category term="技术" scheme="http://topdna.org/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[歙县之美]]></title>
    <link href="http://topdna.org/life/the-beauty-of-county/"/>
    <id>http://topdna.org/life/the-beauty-of-county/</id>
    <published>2011-04-17T13:08:13.000Z</published>
    <updated>2013-09-21T11:52:24.000Z</updated>
    <content type="html"><![CDATA[<p>歙县之美在山、在水，在浓浓的乡土气息：在垅垅的春茶，在金黄的油菜花，在挺拔的青竹，在苍劲的林木，在高低起伏的丘陵、梯田，更在这潺潺的流水，在田间的泥巴小路，在古味盎然的徽派建筑，在茶农的辛苦劳作，在突然间冒出来吓得美女花容失色的昆虫啦、蚯蚓啦、猛狗啦⋯⋯，在田里的麦苗啦、辣椒啦、土豆啦、萝卜啦还有那些让人惭愧的叫不上名的花花草草；更在我们这一群人的“行行摄摄”和欢声笑语里。</p>
<p>目之所见皆美，如果你有一双发现美的眼睛。</p>
<p><span class="alignright ps">2011/4/17 21:08 @杭州滨江</span></p>
]]></content>
    <summary type="html">
    <![CDATA[歙县之美在山、在水，在浓浓的乡土气息：在垅垅的春茶，在金黄的油菜花……]]>
    
    </summary>
    
      <category term="生活" scheme="http://topdna.org/tags/life/"/>
    
      <category term="旅行" scheme="http://topdna.org/tags/travel/"/>
    
      <category term="生活" scheme="http://topdna.org/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[古有两驹]]></title>
    <link href="http://topdna.org/essay/two-horses/"/>
    <id>http://topdna.org/essay/two-horses/</id>
    <published>2010-12-22T15:36:35.000Z</published>
    <updated>2013-09-06T08:15:14.000Z</updated>
    <content type="html"><![CDATA[<p>古有两驹，一棕色跛脚者性温良，人人可骑，故骑者甚众。另一良驹毛金色，高八尺，腿长且壮，善奔跑；能日行千里，能数日不食，能一食数日；奔则毛发皆立，鸣则声震八方，然性烈，众莫能御，谓之汗血宝马。一日，棕马谓宝马曰：“汝甚良而性烈，终将孤独终老”。宝马默然不语。</p>
<p><span class="alignright ps">2010/12/22 23:36 @杭州滨江</span></p>
]]></content>
    <summary type="html">
    <![CDATA[一良驹毛金色，高八尺，腿长且壮，善奔跑；能日行千里，能数日不食，能一食数日；奔则毛发皆立，鸣则声震八方，然性烈，众莫能御，谓之汗血宝马。]]>
    
    </summary>
    
      <category term="随感" scheme="http://topdna.org/tags/essay/"/>
    
      <category term="随感" scheme="http://topdna.org/categories/essay/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[无聊一作]]></title>
    <link href="http://topdna.org/essay/nothing-meaningful/"/>
    <id>http://topdna.org/essay/nothing-meaningful/</id>
    <published>2010-12-06T23:30:00.000Z</published>
    <updated>2014-02-08T08:23:29.000Z</updated>
    <content type="html"><![CDATA[<center><br>上: 遍寻不着，犹记当年小蛮腰，空余恨，一身五花膘。<br>下: 相思未了，常念当初同言笑，皆是叹，满目悲寂寥。<br></center>

<p><span class="alignright ps">2010@HZ</span></p>
]]></content>
    <summary type="html">
    <![CDATA[遍寻不着，犹记当年小蛮腰，空余恨，一身五花膘;相思未了，常念当初同言笑，皆是叹，满目悲寂寥。]]>
    
    </summary>
    
      <category term="生活" scheme="http://topdna.org/tags/life/"/>
    
      <category term="随感" scheme="http://topdna.org/tags/essay/"/>
    
      <category term="随感" scheme="http://topdna.org/categories/essay/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如果有爱,愿与偕老——Ali艺术节《如果•爱》后记]]></title>
    <link href="http://topdna.org/essay/if-you-love-me/"/>
    <id>http://topdna.org/essay/if-you-love-me/</id>
    <published>2010-11-16T16:30:00.000Z</published>
    <updated>2013-09-21T11:50:59.000Z</updated>
    <content type="html"><![CDATA[<p>《如果•爱》剧情梗概：</p>
<p>我不知道有多少人可以耐心地读下去，毕竟，这是一个忙碌的世界，我们或已无法宁静下来去思考，去爱。<br><a id="more"></a><br>那是遥远的八零年代，彼时有个游手好闲的富家男孩爱上了一个贫家女孩。他们相知、相爱，他们沉浸在浪漫和甜蜜之中，他们以为并深信自己就是对方的唯一。可是终究男孩年少轻狂，在一次聚会中，这个富家子弟被一个出身高贵的富家女的美貌所吸引。他，这个负心的男人，开始另逐新欢，而那位可怜的姑娘眼见挚爱变心，只好悲痛离去……</p>
<p>总是失去后才开始怀念，男孩终于还是发现自己深爱的仍然是最初的相识。而那位富家姑娘也察觉到了男孩心在此而意在彼，心中仍对旧爱念念不忘，终于，她还是决定转身离去。</p>
<p>可怜的男孩！他感觉自己仿佛被这个世界抛弃了，他开始醉酒、彻夜不归，独自一个人在深夜的街道上踌躇，徘徊，踌躇，徘徊……，心中充满了对失去旧爱的悔恨。总是空荡荡的街道，相伴的总是静静的街灯和总是消瘦沉默的身影。正可谓“相思未了，常念当初同言笑，皆是叹，满目悲寂寥……”。</p>
<p>孤独从来不孤独，独行从来不独行。这个拖着沉沉脚步在深夜的街道上孑然行走的男人，就在偶然抬头的一瞬发现了他深爱的女人。他多想伸出手去挽住她，他也确实伸出手了，可是他还犹豫着：“她会原谅我么？她会原谅我么？她还在怨我吧？是的，她一定还在怨我！”。念及此，这个平时大大咧咧的男人终究还是被自尊心给束住了，他缩回了自己的手，他开始想逃离，想躲开这个让他羞愧的女人，他真的逃了，可是这仓惶后退的脚步终于还是停住了，因为爱！是的，因为爱，爱情终究还是战胜了自尊，他向女孩大步走去，想要拉住她，而她此时显然也发现了他，见他疾步走来她的潜意识是远离这个让自己受伤的男人。她转过身，然而，手，却被牢牢抓住了。就在那一瞬，所有的心理防线都全线瓦解了，她不由自主地跟着他走，因为爱，因为她也深爱着这个男人，而男孩深情与悔恨的眼神也冰释了她心中的怨。或许，这就是爱。</p>
<p>这就是那段80年代的爱情故事。</p>
<p><span class="alignright ps">2010/11/17  00:30:00@滨江</span></p>
]]></content>
    <summary type="html">
    <![CDATA[我不知道有多少人可以耐心地读下去，毕竟，这是一个忙碌的世界，我们或已无法宁静下来去思考，去爱。]]>
    
    </summary>
    
      <category term="生活" scheme="http://topdna.org/tags/life/"/>
    
      <category term="随感" scheme="http://topdna.org/tags/essay/"/>
    
      <category term="随感" scheme="http://topdna.org/categories/essay/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[光阴都哪儿去了?]]></title>
    <link href="http://topdna.org/essay/time-is-flying/"/>
    <id>http://topdna.org/essay/time-is-flying/</id>
    <published>2010-10-20T12:03:27.000Z</published>
    <updated>2014-02-08T08:24:59.000Z</updated>
    <content type="html"><![CDATA[<p>很久没有写点什么了，<br>总是推说自己很忙，<br>其实不过是自欺欺人罢了，<br>还是有大把的光阴从握着鼠标的手下无端地滑过。  </p>
<p>以前读书的时候，<br>念到朱自清的散文《匆匆》里面关于时间的感慨，<br>不禁暗笑他过于矫情与多愁善感，<br>连时间流逝这么稀松平常的事也要叹息一番，<br>我还巴不得时间能够过得快一点，<br>        可以早点长大挣钱呢。  </p>
<p><a id="more"></a><br>而如今，我却也像朱先生那样“矫情”起来，<br>每每叹息流光不返，青春易逝，<br>恨不得时间能够停下来。<br>想想那遥远的学生时代正是年轻而不自知的时候，<br>只是现在的我们已经无法带着已有的经验回到从前，<br>去为那时的自己重新规划一番，<br>好让现在的我不会像当下这么糟。<br>那时，<br>可笑的我们对于前人的经验总是置若罔闻，<br>以为我们这么独特而又聪明，<br>怎么可能重复他们的足迹？<br>现在才发现——<br>很多时候，我们走过的路与前人别无二致。  </p>
<p>人生不是电脑，<br>        没有系统还原，<br>错过的、失去的都不会再回来……  </p>
<p><span class="alignright ps">2010/10/20 @ 杭州滨江</span></p>
]]></content>
    <summary type="html">
    <![CDATA[很久没有写点什么了，总是推说自己很忙，其实不过是自欺欺人罢了，还是有大把的光阴从握着鼠标的手下无端地滑过。每每叹息流光不返，青春易逝，恨不得时间能够停下来。]]>
    
    </summary>
    
      <category term="随感" scheme="http://topdna.org/tags/essay/"/>
    
      <category term="随感" scheme="http://topdna.org/categories/essay/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[见与不见]]></title>
    <link href="http://topdna.org/essay/see-you-or-not/"/>
    <id>http://topdna.org/essay/see-you-or-not/</id>
    <published>2010-09-05T13:05:35.000Z</published>
    <updated>2013-12-15T07:20:17.000Z</updated>
    <content type="html"><![CDATA[<center><br>见你时，你在我眼里，不见你时，你在我心里。<br></center>

<p><span class="alignright ps">@HZ</span></p>
]]></content>
    <summary type="html">
    <![CDATA[见你时, 你在我眼里, 不见你时, 你在我心里.]]>
    
    </summary>
    
      <category term="随感" scheme="http://topdna.org/tags/essay/"/>
    
      <category term="随感" scheme="http://topdna.org/categories/essay/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[秋意浓]]></title>
    <link href="http://topdna.org/essay/the-autumn/"/>
    <id>http://topdna.org/essay/the-autumn/</id>
    <published>2010-08-26T16:25:37.000Z</published>
    <updated>2014-02-08T08:28:11.000Z</updated>
    <content type="html"><![CDATA[<center><br>暑尽秋意浓，<br>翘望满目空，<br>西子斜阳里，<br>游客独匆匆。<br></center>

<p><span class="alignright ps">2010/08/27@HZ</span></p>
]]></content>
    <summary type="html">
    <![CDATA[暑尽秋意浓，翘望满目空，西子斜阳里，游客独匆匆。]]>
    
    </summary>
    
      <category term="生活" scheme="http://topdna.org/tags/life/"/>
    
      <category term="随感" scheme="http://topdna.org/tags/essay/"/>
    
      <category term="随感" scheme="http://topdna.org/categories/essay/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[五七惨案]]></title>
    <link href="http://topdna.org/essay/seventy-yards/"/>
    <id>http://topdna.org/essay/seventy-yards/</id>
    <published>2009-05-11T13:07:06.000Z</published>
    <updated>2014-02-08T08:28:49.000Z</updated>
    <content type="html"><![CDATA[<center><br>顽劣富家子，<br>无视贫家郎，<br>草菅路人命，<br>出事还嚣张，<br>这厮甚可恶，<br>理应蹲班房，<br>若不严惩戒，<br>何以抚民伤？<br></center>

<p><span class="alignright ps">2009/05/11@USTC</span></p>
]]></content>
    <summary type="html">
    <![CDATA[顽劣富家子，无视贫家郎，草菅路人命，出事还嚣张，这厮甚可恶，理应蹲班房，若不严惩戒，何以抚民伤？]]>
    
    </summary>
    
      <category term="随感" scheme="http://topdna.org/tags/essay/"/>
    
      <category term="随感" scheme="http://topdna.org/categories/essay/"/>
    
  </entry>
  
</feed>
